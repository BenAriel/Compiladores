Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALL
    DIVIDE
    DisjointWith
    Literal
    MINUS
    NCName
    NMTOKEN
    NOT
    Name
    PLUS
    PlainLiteral
    THAT
    TIMES
    XMLLiteral
    anyURI
    base64Binary
    boolean
    byte
    dateTime
    dateTimeStamp
    decimal
    double
    float
    hexBinary
    int
    integer
    langString
    languague
    long
    negativeInteger
    nonNegativeInteger
    owl
    rational
    rdf
    rdfs
    real
    string
    xsd

Grammar

Rule 0     S' -> statements
Rule 1     statements -> Class CLASS_IDENTIFIER statement_defined_class statements
Rule 2     statements -> Class CLASS_IDENTIFIER statement_defined_class
Rule 3     statements -> Class CLASS_IDENTIFIER statement_primitive_class
Rule 4     statements -> Class CLASS_IDENTIFIER statement_primitive_class statements
Rule 5     statements -> empty
Rule 6     statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals
Rule 7     statement_defined_class -> subclassof_possible EquivalentTo_possible statement_class_disjoin statement_class_individuals
Rule 8     statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals
Rule 9     EquivalentTo_possible -> EquivalentTo JustDefined
Rule 10    EquivalentTo_possible -> EquivalentTo nested
Rule 11    EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class
Rule 12    EquivalentTo_possible -> EquivalentTo statement_enumerated_class
Rule 13    EquivalentTo_possible -> EquivalentTo statement_covered_class
Rule 14    maybe_suclassof -> subclassof_possible
Rule 15    maybe_suclassof -> empty
Rule 16    subclassof_possible -> SubClassOf primitive_class_mandatory
Rule 17    subclassof_possible -> SubClassOf statement_closed_axiom_class
Rule 18    JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals
Rule 19    JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals
Rule 20    statement_reserved_word -> SOME
Rule 21    statement_reserved_word -> EXACTLY
Rule 22    statement_reserved_word -> MIN
Rule 23    statement_reserved_word -> MAX
Rule 24    statement_reserved_word -> OR
Rule 25    statement_reserved_word -> ONLY
Rule 26    statement_reserved_word -> AND
Rule 27    statement_reserved_word -> VALUE
Rule 28    statement_property_identify -> PROPERTY_IDENTIFIER_has
Rule 29    statement_property_identify -> PROPERTY_IDENTIFIER_is_Of
Rule 30    statement_property_identify -> PROPERTY_IDENTIFIER
Rule 31    primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER
Rule 32    primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
Rule 33    primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
Rule 34    primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
Rule 35    primitive_class_mandatory -> CLASS_IDENTIFIER
Rule 36    primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory
Rule 37    statement_class_disjoin -> empty
Rule 38    statement_class_disjoin -> DisjointClasses statement_class_disjoin_check
Rule 39    statement_class_disjoin_check -> CLASS_IDENTIFIER
Rule 40    statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check
Rule 41    statement_class_individuals -> empty
Rule 42    statement_class_individuals -> Individuals statement_class_individuals_check
Rule 43    statement_class_individuals_check -> IndividualNames
Rule 44    statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check
Rule 45    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
Rule 46    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
Rule 47    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
Rule 48    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
Rule 49    statement_operator_symbol -> LESS_THAN
Rule 50    statement_operator_symbol -> GREATER_THAN
Rule 51    statement_operator_symbol -> EQUALS
Rule 52    statement_operator_symbol -> GREATER_THAN EQUALS
Rule 53    statement_operator_symbol -> LESS_THAN EQUALS
Rule 54    nested -> nested AND nested
Rule 55    nested -> nested OR nested
Rule 56    nested -> LEFT_PAREN nested RIGHT_PAREN
Rule 57    nested -> statement_property_identify statement_reserved_word nested
Rule 58    nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER
Rule 59    nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
Rule 60    nested -> statement_property_identify statement_reserved_word VALUE nested
Rule 61    nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
Rule 62    nested -> statement_property_identify statement_reserved_word ONLY nested
Rule 63    nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
Rule 64    nested -> statement_property_identify statement_reserved_word SOME nested
Rule 65    nested -> CLASS_IDENTIFIER
Rule 66    statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory
Rule 67    closed_axiom_mandatory -> CLASS_IDENTIFIER
Rule 68    closed_axiom_mandatory -> statement_property_restriction
Rule 69    closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory
Rule 70    closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory
Rule 71    statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER
Rule 72    statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
Rule 73    closed_axiom_restriction_combination -> CLASS_IDENTIFIER
Rule 74    closed_axiom_restriction_combination -> CLASS_IDENTIFIER OR closed_axiom_restriction_combination
Rule 75    statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET
Rule 76    statement_enumerated_class_check -> IndividualNames
Rule 77    statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check
Rule 78    statement_covered_class -> statement_covered_class_check
Rule 79    statement_covered_class_check -> CLASS_IDENTIFIER
Rule 80    statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check
Rule 81    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 
AND                  : 18 26 54
CLASS_IDENTIFIER     : 1 2 3 4 18 19 31 32 35 36 39 40 45 46 58 59 61 63 65 66 67 69 71 73 74 79 80
COMMA                : 19 32 34 36 40 44 46 48 66 69 70 77
Class                : 1 2 3 4
DATA_TYPE            : 33 34 47 48
DIVIDE               : 
DisjointClasses      : 38
DisjointWith         : 
EQUALS               : 51 52 53
EXACTLY              : 21
EquivalentTo         : 9 10 11 12 13
GREATER_THAN         : 50 52
IndividualNames      : 43 44 76 77
Individuals          : 42
LEFT_BRACKET         : 47 48
LEFT_CURLY_BRACKET   : 75
LEFT_PAREN           : 18 56 72
LESS_THAN            : 49 53
Literal              : 
MAX                  : 23
MIN                  : 22
MINUS                : 
NAMESPACEID          : 33 34 47 48
NCName               : 
NMTOKEN              : 
NOT                  : 
NUMBER               : 47 48
Name                 : 
ONLY                 : 25 61 62 72
OR                   : 24 55 74 80
PLUS                 : 
PROPERTY_IDENTIFIER  : 30
PROPERTY_IDENTIFIER_has : 28
PROPERTY_IDENTIFIER_is_Of : 29
PlainLiteral         : 
RIGHT_BRACKET        : 47 48
RIGHT_CURLY_BRACKET  : 75
RIGHT_PAREN          : 45 46 47 48 56 72
SOME                 : 20 63 64 71
SubClassOf           : 16 17
THAT                 : 
TIMES                : 
VALUE                : 27 59 60
XMLLiteral           : 
anyURI               : 
base64Binary         : 
boolean              : 
byte                 : 
dateTime             : 
dateTimeStamp        : 
decimal              : 
double               : 
error                : 
float                : 
hexBinary            : 
int                  : 
integer              : 
langString           : 
languague            : 
long                 : 
negativeInteger      : 
nonNegativeInteger   : 
owl                  : 
rational             : 
rdf                  : 
rdfs                 : 
real                 : 
string               : 
xsd                  : 

Nonterminals, with rules where they appear

EquivalentTo_possible : 6 7
JustDefined          : 9
closed_axiom_mandatory : 66 69 70
closed_axiom_restriction_combination : 72 74
empty                : 5 15 37 41
maybe_suclassof      : 6
nested               : 10 54 54 55 55 56 57 60 62 64
primitive_class_mandatory : 16 32 34 36
statement_class_disjoin : 6 7 8
statement_class_disjoin_check : 38 40
statement_class_individuals : 6 7 8 18 19
statement_class_individuals_check : 42 44
statement_closed_axiom_class : 11 17
statement_covered_class : 13
statement_covered_class_check : 78 80
statement_defined_class : 1 2
statement_defined_class_equivalent : 18 19 46 48
statement_enumerated_class : 12
statement_enumerated_class_check : 75 77
statement_operator_symbol : 47 48
statement_primitive_class : 3 4
statement_property_identify : 31 32 33 34 45 46 47 48 57 58 59 60 61 62 63 64 71 72
statement_property_restriction : 68 70
statement_reserved_word : 31 32 33 34 45 46 47 48 57 58 59 60 61 62 63 64
statements           : 1 4 0
subclassof_possible  : 7 8 14

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (81) empty -> .

    Class           shift and go to state 2
    $end            reduce using rule 81 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 3

state 1

    (0) S' -> statements .



state 2

    (1) statements -> Class . CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> Class . CLASS_IDENTIFIER statement_defined_class
    (3) statements -> Class . CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> Class . CLASS_IDENTIFIER statement_primitive_class statements

    CLASS_IDENTIFIER shift and go to state 4


state 3

    (5) statements -> empty .

    $end            reduce using rule 5 (statements -> empty .)


state 4

    (1) statements -> Class CLASS_IDENTIFIER . statement_defined_class statements
    (2) statements -> Class CLASS_IDENTIFIER . statement_defined_class
    (3) statements -> Class CLASS_IDENTIFIER . statement_primitive_class
    (4) statements -> Class CLASS_IDENTIFIER . statement_primitive_class statements
    (6) statement_defined_class -> . EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals
    (7) statement_defined_class -> . subclassof_possible EquivalentTo_possible statement_class_disjoin statement_class_individuals
    (8) statement_primitive_class -> . subclassof_possible statement_class_disjoin statement_class_individuals
    (9) EquivalentTo_possible -> . EquivalentTo JustDefined
    (10) EquivalentTo_possible -> . EquivalentTo nested
    (11) EquivalentTo_possible -> . EquivalentTo statement_closed_axiom_class
    (12) EquivalentTo_possible -> . EquivalentTo statement_enumerated_class
    (13) EquivalentTo_possible -> . EquivalentTo statement_covered_class
    (16) subclassof_possible -> . SubClassOf primitive_class_mandatory
    (17) subclassof_possible -> . SubClassOf statement_closed_axiom_class

    EquivalentTo    shift and go to state 9
    SubClassOf      shift and go to state 10

    statement_defined_class        shift and go to state 5
    statement_primitive_class      shift and go to state 6
    EquivalentTo_possible          shift and go to state 7
    subclassof_possible            shift and go to state 8

state 5

    (1) statements -> Class CLASS_IDENTIFIER statement_defined_class . statements
    (2) statements -> Class CLASS_IDENTIFIER statement_defined_class .
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (81) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (statements -> Class CLASS_IDENTIFIER statement_defined_class .)
    $end            reduce using rule 2 (statements -> Class CLASS_IDENTIFIER statement_defined_class .)
    Class           shift and go to state 2

  ! $end            [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 11
    empty                          shift and go to state 3

state 6

    (3) statements -> Class CLASS_IDENTIFIER statement_primitive_class .
    (4) statements -> Class CLASS_IDENTIFIER statement_primitive_class . statements
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (81) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 3 (statements -> Class CLASS_IDENTIFIER statement_primitive_class .)
    $end            reduce using rule 3 (statements -> Class CLASS_IDENTIFIER statement_primitive_class .)
    Class           shift and go to state 2

  ! $end            [ reduce using rule 81 (empty -> .) ]

    statements                     shift and go to state 12
    empty                          shift and go to state 3

state 7

    (6) statement_defined_class -> EquivalentTo_possible . maybe_suclassof statement_class_disjoin statement_class_individuals
    (14) maybe_suclassof -> . subclassof_possible
    (15) maybe_suclassof -> . empty
    (16) subclassof_possible -> . SubClassOf primitive_class_mandatory
    (17) subclassof_possible -> . SubClassOf statement_closed_axiom_class
    (81) empty -> .

    SubClassOf      shift and go to state 10
    DisjointClasses reduce using rule 81 (empty -> .)
    Individuals     reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    maybe_suclassof                shift and go to state 13
    subclassof_possible            shift and go to state 14
    empty                          shift and go to state 15

state 8

    (7) statement_defined_class -> subclassof_possible . EquivalentTo_possible statement_class_disjoin statement_class_individuals
    (8) statement_primitive_class -> subclassof_possible . statement_class_disjoin statement_class_individuals
    (9) EquivalentTo_possible -> . EquivalentTo JustDefined
    (10) EquivalentTo_possible -> . EquivalentTo nested
    (11) EquivalentTo_possible -> . EquivalentTo statement_closed_axiom_class
    (12) EquivalentTo_possible -> . EquivalentTo statement_enumerated_class
    (13) EquivalentTo_possible -> . EquivalentTo statement_covered_class
    (37) statement_class_disjoin -> . empty
    (38) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (81) empty -> .

    EquivalentTo    shift and go to state 9
    DisjointClasses shift and go to state 19
    Individuals     reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    EquivalentTo_possible          shift and go to state 16
    statement_class_disjoin        shift and go to state 17
    empty                          shift and go to state 18

state 9

    (9) EquivalentTo_possible -> EquivalentTo . JustDefined
    (10) EquivalentTo_possible -> EquivalentTo . nested
    (11) EquivalentTo_possible -> EquivalentTo . statement_closed_axiom_class
    (12) EquivalentTo_possible -> EquivalentTo . statement_enumerated_class
    (13) EquivalentTo_possible -> EquivalentTo . statement_covered_class
    (18) JustDefined -> . CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals
    (19) JustDefined -> . CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (66) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (75) statement_enumerated_class -> . LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET
    (78) statement_covered_class -> . statement_covered_class_check
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER
    (79) statement_covered_class_check -> . CLASS_IDENTIFIER
    (80) statement_covered_class_check -> . CLASS_IDENTIFIER OR statement_covered_class_check

    CLASS_IDENTIFIER shift and go to state 25
    LEFT_PAREN      shift and go to state 26
    LEFT_CURLY_BRACKET shift and go to state 28
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    JustDefined                    shift and go to state 20
    nested                         shift and go to state 21
    statement_closed_axiom_class   shift and go to state 22
    statement_enumerated_class     shift and go to state 23
    statement_covered_class        shift and go to state 24
    statement_property_identify    shift and go to state 27
    statement_covered_class_check  shift and go to state 29

state 10

    (16) subclassof_possible -> SubClassOf . primitive_class_mandatory
    (17) subclassof_possible -> SubClassOf . statement_closed_axiom_class
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (66) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 36
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    primitive_class_mandatory      shift and go to state 33
    statement_closed_axiom_class   shift and go to state 34
    statement_property_identify    shift and go to state 35

state 11

    (1) statements -> Class CLASS_IDENTIFIER statement_defined_class statements .

    $end            reduce using rule 1 (statements -> Class CLASS_IDENTIFIER statement_defined_class statements .)


state 12

    (4) statements -> Class CLASS_IDENTIFIER statement_primitive_class statements .

    $end            reduce using rule 4 (statements -> Class CLASS_IDENTIFIER statement_primitive_class statements .)


state 13

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof . statement_class_disjoin statement_class_individuals
    (37) statement_class_disjoin -> . empty
    (38) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (81) empty -> .

    DisjointClasses shift and go to state 19
    Individuals     reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    statement_class_disjoin        shift and go to state 37
    empty                          shift and go to state 18

state 14

    (14) maybe_suclassof -> subclassof_possible .

    DisjointClasses reduce using rule 14 (maybe_suclassof -> subclassof_possible .)
    Individuals     reduce using rule 14 (maybe_suclassof -> subclassof_possible .)
    Class           reduce using rule 14 (maybe_suclassof -> subclassof_possible .)
    $end            reduce using rule 14 (maybe_suclassof -> subclassof_possible .)


state 15

    (15) maybe_suclassof -> empty .

    DisjointClasses reduce using rule 15 (maybe_suclassof -> empty .)
    Individuals     reduce using rule 15 (maybe_suclassof -> empty .)
    Class           reduce using rule 15 (maybe_suclassof -> empty .)
    $end            reduce using rule 15 (maybe_suclassof -> empty .)


state 16

    (7) statement_defined_class -> subclassof_possible EquivalentTo_possible . statement_class_disjoin statement_class_individuals
    (37) statement_class_disjoin -> . empty
    (38) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (81) empty -> .

    DisjointClasses shift and go to state 19
    Individuals     reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    statement_class_disjoin        shift and go to state 38
    empty                          shift and go to state 18

state 17

    (8) statement_primitive_class -> subclassof_possible statement_class_disjoin . statement_class_individuals
    (41) statement_class_individuals -> . empty
    (42) statement_class_individuals -> . Individuals statement_class_individuals_check
    (81) empty -> .

    Individuals     shift and go to state 41
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    statement_class_individuals    shift and go to state 39
    empty                          shift and go to state 40

state 18

    (37) statement_class_disjoin -> empty .

    Individuals     reduce using rule 37 (statement_class_disjoin -> empty .)
    Class           reduce using rule 37 (statement_class_disjoin -> empty .)
    $end            reduce using rule 37 (statement_class_disjoin -> empty .)


state 19

    (38) statement_class_disjoin -> DisjointClasses . statement_class_disjoin_check
    (39) statement_class_disjoin_check -> . CLASS_IDENTIFIER
    (40) statement_class_disjoin_check -> . CLASS_IDENTIFIER COMMA statement_class_disjoin_check

    CLASS_IDENTIFIER shift and go to state 43

    statement_class_disjoin_check  shift and go to state 42

state 20

    (9) EquivalentTo_possible -> EquivalentTo JustDefined .

    SubClassOf      reduce using rule 9 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    DisjointClasses reduce using rule 9 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    Individuals     reduce using rule 9 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    Class           reduce using rule 9 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    $end            reduce using rule 9 (EquivalentTo_possible -> EquivalentTo JustDefined .)


state 21

    (10) EquivalentTo_possible -> EquivalentTo nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

    SubClassOf      reduce using rule 10 (EquivalentTo_possible -> EquivalentTo nested .)
    DisjointClasses reduce using rule 10 (EquivalentTo_possible -> EquivalentTo nested .)
    Individuals     reduce using rule 10 (EquivalentTo_possible -> EquivalentTo nested .)
    Class           reduce using rule 10 (EquivalentTo_possible -> EquivalentTo nested .)
    $end            reduce using rule 10 (EquivalentTo_possible -> EquivalentTo nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45


state 22

    (11) EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .

    SubClassOf      reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    DisjointClasses reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    Individuals     reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    Class           reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    $end            reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)


state 23

    (12) EquivalentTo_possible -> EquivalentTo statement_enumerated_class .

    SubClassOf      reduce using rule 12 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    DisjointClasses reduce using rule 12 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    Individuals     reduce using rule 12 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    Class           reduce using rule 12 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    $end            reduce using rule 12 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)


state 24

    (13) EquivalentTo_possible -> EquivalentTo statement_covered_class .

    SubClassOf      reduce using rule 13 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    DisjointClasses reduce using rule 13 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    Individuals     reduce using rule 13 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    Class           reduce using rule 13 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    $end            reduce using rule 13 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)


state 25

    (18) JustDefined -> CLASS_IDENTIFIER . AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals
    (19) JustDefined -> CLASS_IDENTIFIER . COMMA statement_defined_class_equivalent statement_class_individuals
    (65) nested -> CLASS_IDENTIFIER .
    (66) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA closed_axiom_mandatory
    (79) statement_covered_class_check -> CLASS_IDENTIFIER .
    (80) statement_covered_class_check -> CLASS_IDENTIFIER . OR statement_covered_class_check

  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for SubClassOf resolved using rule 65 (nested -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 65 (nested -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 65 (nested -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 65 (nested -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 65 (nested -> CLASS_IDENTIFIER .)
  ! shift/reduce conflict for OR resolved as shift
    AND             shift and go to state 46
    COMMA           shift and go to state 47
    SubClassOf      reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    Class           reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    $end            reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    OR              shift and go to state 48

  ! AND             [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]


state 26

    (56) nested -> LEFT_PAREN . nested RIGHT_PAREN
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 26
    CLASS_IDENTIFIER shift and go to state 50
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    nested                         shift and go to state 49
    statement_property_identify    shift and go to state 27

state 27

    (57) nested -> statement_property_identify . statement_reserved_word nested
    (58) nested -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> statement_property_identify . statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> statement_property_identify . statement_reserved_word VALUE nested
    (61) nested -> statement_property_identify . statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> statement_property_identify . statement_reserved_word ONLY nested
    (63) nested -> statement_property_identify . statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> statement_property_identify . statement_reserved_word SOME nested
    (20) statement_reserved_word -> . SOME
    (21) statement_reserved_word -> . EXACTLY
    (22) statement_reserved_word -> . MIN
    (23) statement_reserved_word -> . MAX
    (24) statement_reserved_word -> . OR
    (25) statement_reserved_word -> . ONLY
    (26) statement_reserved_word -> . AND
    (27) statement_reserved_word -> . VALUE

    SOME            shift and go to state 54
    EXACTLY         shift and go to state 55
    MIN             shift and go to state 56
    MAX             shift and go to state 57
    OR              shift and go to state 58
    ONLY            shift and go to state 53
    AND             shift and go to state 59
    VALUE           shift and go to state 52

    statement_reserved_word        shift and go to state 51

state 28

    (75) statement_enumerated_class -> LEFT_CURLY_BRACKET . statement_enumerated_class_check RIGHT_CURLY_BRACKET
    (76) statement_enumerated_class_check -> . IndividualNames
    (77) statement_enumerated_class_check -> . IndividualNames COMMA statement_enumerated_class_check

    IndividualNames shift and go to state 61

    statement_enumerated_class_check shift and go to state 60

state 29

    (78) statement_covered_class -> statement_covered_class_check .

    SubClassOf      reduce using rule 78 (statement_covered_class -> statement_covered_class_check .)
    DisjointClasses reduce using rule 78 (statement_covered_class -> statement_covered_class_check .)
    Individuals     reduce using rule 78 (statement_covered_class -> statement_covered_class_check .)
    Class           reduce using rule 78 (statement_covered_class -> statement_covered_class_check .)
    $end            reduce using rule 78 (statement_covered_class -> statement_covered_class_check .)


state 30

    (28) statement_property_identify -> PROPERTY_IDENTIFIER_has .

    SOME            reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    EXACTLY         reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    MIN             reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    MAX             reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    OR              reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    ONLY            reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    AND             reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    VALUE           reduce using rule 28 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)


state 31

    (29) statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .

    SOME            reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    EXACTLY         reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    MIN             reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    MAX             reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    OR              reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    ONLY            reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    AND             reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    VALUE           reduce using rule 29 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)


state 32

    (30) statement_property_identify -> PROPERTY_IDENTIFIER .

    SOME            reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    EXACTLY         reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    MIN             reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    MAX             reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    OR              reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    ONLY            reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    VALUE           reduce using rule 30 (statement_property_identify -> PROPERTY_IDENTIFIER .)


state 33

    (16) subclassof_possible -> SubClassOf primitive_class_mandatory .

    EquivalentTo    reduce using rule 16 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    DisjointClasses reduce using rule 16 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    Individuals     reduce using rule 16 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    Class           reduce using rule 16 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    $end            reduce using rule 16 (subclassof_possible -> SubClassOf primitive_class_mandatory .)


state 34

    (17) subclassof_possible -> SubClassOf statement_closed_axiom_class .

    EquivalentTo    reduce using rule 17 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    DisjointClasses reduce using rule 17 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    Individuals     reduce using rule 17 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    Class           reduce using rule 17 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    $end            reduce using rule 17 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)


state 35

    (31) primitive_class_mandatory -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (20) statement_reserved_word -> . SOME
    (21) statement_reserved_word -> . EXACTLY
    (22) statement_reserved_word -> . MIN
    (23) statement_reserved_word -> . MAX
    (24) statement_reserved_word -> . OR
    (25) statement_reserved_word -> . ONLY
    (26) statement_reserved_word -> . AND
    (27) statement_reserved_word -> . VALUE

    SOME            shift and go to state 54
    EXACTLY         shift and go to state 55
    MIN             shift and go to state 56
    MAX             shift and go to state 57
    OR              shift and go to state 58
    ONLY            shift and go to state 53
    AND             shift and go to state 59
    VALUE           shift and go to state 52

    statement_reserved_word        shift and go to state 62

state 36

    (35) primitive_class_mandatory -> CLASS_IDENTIFIER .
    (36) primitive_class_mandatory -> CLASS_IDENTIFIER . COMMA primitive_class_mandatory
    (66) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA closed_axiom_mandatory

    EquivalentTo    reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Class           reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    $end            reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 63


state 37

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin . statement_class_individuals
    (41) statement_class_individuals -> . empty
    (42) statement_class_individuals -> . Individuals statement_class_individuals_check
    (81) empty -> .

    Individuals     shift and go to state 41
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    statement_class_individuals    shift and go to state 64
    empty                          shift and go to state 40

state 38

    (7) statement_defined_class -> subclassof_possible EquivalentTo_possible statement_class_disjoin . statement_class_individuals
    (41) statement_class_individuals -> . empty
    (42) statement_class_individuals -> . Individuals statement_class_individuals_check
    (81) empty -> .

    Individuals     shift and go to state 41
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

    statement_class_individuals    shift and go to state 65
    empty                          shift and go to state 40

state 39

    (8) statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .

    Class           reduce using rule 8 (statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 8 (statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .)


state 40

    (41) statement_class_individuals -> empty .

    Class           reduce using rule 41 (statement_class_individuals -> empty .)
    $end            reduce using rule 41 (statement_class_individuals -> empty .)
    SubClassOf      reduce using rule 41 (statement_class_individuals -> empty .)
    DisjointClasses reduce using rule 41 (statement_class_individuals -> empty .)
    Individuals     reduce using rule 41 (statement_class_individuals -> empty .)


state 41

    (42) statement_class_individuals -> Individuals . statement_class_individuals_check
    (43) statement_class_individuals_check -> . IndividualNames
    (44) statement_class_individuals_check -> . IndividualNames COMMA statement_class_individuals_check

    IndividualNames shift and go to state 67

    statement_class_individuals_check shift and go to state 66

state 42

    (38) statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .

    Individuals     reduce using rule 38 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    Class           reduce using rule 38 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    $end            reduce using rule 38 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)


state 43

    (39) statement_class_disjoin_check -> CLASS_IDENTIFIER .
    (40) statement_class_disjoin_check -> CLASS_IDENTIFIER . COMMA statement_class_disjoin_check

    Individuals     reduce using rule 39 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    Class           reduce using rule 39 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    $end            reduce using rule 39 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 68


state 44

    (54) nested -> nested AND . nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 26
    CLASS_IDENTIFIER shift and go to state 50
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    nested                         shift and go to state 69
    statement_property_identify    shift and go to state 27

state 45

    (55) nested -> nested OR . nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 26
    CLASS_IDENTIFIER shift and go to state 50
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    nested                         shift and go to state 70
    statement_property_identify    shift and go to state 27

state 46

    (18) JustDefined -> CLASS_IDENTIFIER AND . LEFT_PAREN statement_defined_class_equivalent statement_class_individuals

    LEFT_PAREN      shift and go to state 71


state 47

    (19) JustDefined -> CLASS_IDENTIFIER COMMA . statement_defined_class_equivalent statement_class_individuals
    (66) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . closed_axiom_mandatory
    (45) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (67) closed_axiom_mandatory -> . CLASS_IDENTIFIER
    (68) closed_axiom_mandatory -> . statement_property_restriction
    (69) closed_axiom_mandatory -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (70) closed_axiom_mandatory -> . statement_property_restriction COMMA closed_axiom_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER
    (71) statement_property_restriction -> . statement_property_identify SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> . statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN

    CLASS_IDENTIFIER shift and go to state 72
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_defined_class_equivalent shift and go to state 73
    closed_axiom_mandatory         shift and go to state 74
    statement_property_identify    shift and go to state 75
    statement_property_restriction shift and go to state 76

state 48

    (80) statement_covered_class_check -> CLASS_IDENTIFIER OR . statement_covered_class_check
    (79) statement_covered_class_check -> . CLASS_IDENTIFIER
    (80) statement_covered_class_check -> . CLASS_IDENTIFIER OR statement_covered_class_check

    CLASS_IDENTIFIER shift and go to state 77

    statement_covered_class_check  shift and go to state 78

state 49

    (56) nested -> LEFT_PAREN nested . RIGHT_PAREN
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

    RIGHT_PAREN     shift and go to state 79
    AND             shift and go to state 44
    OR              shift and go to state 45


state 50

    (65) nested -> CLASS_IDENTIFIER .

    RIGHT_PAREN     reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    AND             reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    OR              reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    Class           reduce using rule 65 (nested -> CLASS_IDENTIFIER .)
    $end            reduce using rule 65 (nested -> CLASS_IDENTIFIER .)


state 51

    (57) nested -> statement_property_identify statement_reserved_word . nested
    (58) nested -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER
    (59) nested -> statement_property_identify statement_reserved_word . VALUE CLASS_IDENTIFIER
    (60) nested -> statement_property_identify statement_reserved_word . VALUE nested
    (61) nested -> statement_property_identify statement_reserved_word . ONLY CLASS_IDENTIFIER
    (62) nested -> statement_property_identify statement_reserved_word . ONLY nested
    (63) nested -> statement_property_identify statement_reserved_word . SOME CLASS_IDENTIFIER
    (64) nested -> statement_property_identify statement_reserved_word . SOME nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 81
    VALUE           shift and go to state 82
    ONLY            shift and go to state 83
    SOME            shift and go to state 84
    LEFT_PAREN      shift and go to state 26
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 27
    nested                         shift and go to state 80

state 52

    (27) statement_reserved_word -> VALUE .

    CLASS_IDENTIFIER reduce using rule 27 (statement_reserved_word -> VALUE .)
    VALUE           reduce using rule 27 (statement_reserved_word -> VALUE .)
    ONLY            reduce using rule 27 (statement_reserved_word -> VALUE .)
    SOME            reduce using rule 27 (statement_reserved_word -> VALUE .)
    LEFT_PAREN      reduce using rule 27 (statement_reserved_word -> VALUE .)
    PROPERTY_IDENTIFIER_has reduce using rule 27 (statement_reserved_word -> VALUE .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 27 (statement_reserved_word -> VALUE .)
    PROPERTY_IDENTIFIER reduce using rule 27 (statement_reserved_word -> VALUE .)
    NAMESPACEID     reduce using rule 27 (statement_reserved_word -> VALUE .)


state 53

    (25) statement_reserved_word -> ONLY .

    CLASS_IDENTIFIER reduce using rule 25 (statement_reserved_word -> ONLY .)
    VALUE           reduce using rule 25 (statement_reserved_word -> ONLY .)
    ONLY            reduce using rule 25 (statement_reserved_word -> ONLY .)
    SOME            reduce using rule 25 (statement_reserved_word -> ONLY .)
    LEFT_PAREN      reduce using rule 25 (statement_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER_has reduce using rule 25 (statement_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 25 (statement_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER reduce using rule 25 (statement_reserved_word -> ONLY .)
    NAMESPACEID     reduce using rule 25 (statement_reserved_word -> ONLY .)


state 54

    (20) statement_reserved_word -> SOME .

    CLASS_IDENTIFIER reduce using rule 20 (statement_reserved_word -> SOME .)
    VALUE           reduce using rule 20 (statement_reserved_word -> SOME .)
    ONLY            reduce using rule 20 (statement_reserved_word -> SOME .)
    SOME            reduce using rule 20 (statement_reserved_word -> SOME .)
    LEFT_PAREN      reduce using rule 20 (statement_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_has reduce using rule 20 (statement_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 20 (statement_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 20 (statement_reserved_word -> SOME .)
    NAMESPACEID     reduce using rule 20 (statement_reserved_word -> SOME .)


state 55

    (21) statement_reserved_word -> EXACTLY .

    CLASS_IDENTIFIER reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    VALUE           reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    ONLY            reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    SOME            reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    LEFT_PAREN      reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_has reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 21 (statement_reserved_word -> EXACTLY .)
    NAMESPACEID     reduce using rule 21 (statement_reserved_word -> EXACTLY .)


state 56

    (22) statement_reserved_word -> MIN .

    CLASS_IDENTIFIER reduce using rule 22 (statement_reserved_word -> MIN .)
    VALUE           reduce using rule 22 (statement_reserved_word -> MIN .)
    ONLY            reduce using rule 22 (statement_reserved_word -> MIN .)
    SOME            reduce using rule 22 (statement_reserved_word -> MIN .)
    LEFT_PAREN      reduce using rule 22 (statement_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_has reduce using rule 22 (statement_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 22 (statement_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 22 (statement_reserved_word -> MIN .)
    NAMESPACEID     reduce using rule 22 (statement_reserved_word -> MIN .)


state 57

    (23) statement_reserved_word -> MAX .

    CLASS_IDENTIFIER reduce using rule 23 (statement_reserved_word -> MAX .)
    VALUE           reduce using rule 23 (statement_reserved_word -> MAX .)
    ONLY            reduce using rule 23 (statement_reserved_word -> MAX .)
    SOME            reduce using rule 23 (statement_reserved_word -> MAX .)
    LEFT_PAREN      reduce using rule 23 (statement_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_has reduce using rule 23 (statement_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 23 (statement_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 23 (statement_reserved_word -> MAX .)
    NAMESPACEID     reduce using rule 23 (statement_reserved_word -> MAX .)


state 58

    (24) statement_reserved_word -> OR .

    CLASS_IDENTIFIER reduce using rule 24 (statement_reserved_word -> OR .)
    VALUE           reduce using rule 24 (statement_reserved_word -> OR .)
    ONLY            reduce using rule 24 (statement_reserved_word -> OR .)
    SOME            reduce using rule 24 (statement_reserved_word -> OR .)
    LEFT_PAREN      reduce using rule 24 (statement_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_has reduce using rule 24 (statement_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 24 (statement_reserved_word -> OR .)
    PROPERTY_IDENTIFIER reduce using rule 24 (statement_reserved_word -> OR .)
    NAMESPACEID     reduce using rule 24 (statement_reserved_word -> OR .)


state 59

    (26) statement_reserved_word -> AND .

    CLASS_IDENTIFIER reduce using rule 26 (statement_reserved_word -> AND .)
    VALUE           reduce using rule 26 (statement_reserved_word -> AND .)
    ONLY            reduce using rule 26 (statement_reserved_word -> AND .)
    SOME            reduce using rule 26 (statement_reserved_word -> AND .)
    LEFT_PAREN      reduce using rule 26 (statement_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_has reduce using rule 26 (statement_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 26 (statement_reserved_word -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 26 (statement_reserved_word -> AND .)
    NAMESPACEID     reduce using rule 26 (statement_reserved_word -> AND .)


state 60

    (75) statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 85


state 61

    (76) statement_enumerated_class_check -> IndividualNames .
    (77) statement_enumerated_class_check -> IndividualNames . COMMA statement_enumerated_class_check

    RIGHT_CURLY_BRACKET reduce using rule 76 (statement_enumerated_class_check -> IndividualNames .)
    COMMA           shift and go to state 86


state 62

    (31) primitive_class_mandatory -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory

    CLASS_IDENTIFIER shift and go to state 87
    NAMESPACEID     shift and go to state 88


state 63

    (36) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA . primitive_class_mandatory
    (66) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . closed_axiom_mandatory
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (67) closed_axiom_mandatory -> . CLASS_IDENTIFIER
    (68) closed_axiom_mandatory -> . statement_property_restriction
    (69) closed_axiom_mandatory -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (70) closed_axiom_mandatory -> . statement_property_restriction COMMA closed_axiom_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER
    (71) statement_property_restriction -> . statement_property_identify SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> . statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN

    CLASS_IDENTIFIER shift and go to state 89
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    primitive_class_mandatory      shift and go to state 90
    closed_axiom_mandatory         shift and go to state 74
    statement_property_identify    shift and go to state 91
    statement_property_restriction shift and go to state 76

state 64

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .

    Class           reduce using rule 6 (statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 6 (statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .)


state 65

    (7) statement_defined_class -> subclassof_possible EquivalentTo_possible statement_class_disjoin statement_class_individuals .

    Class           reduce using rule 7 (statement_defined_class -> subclassof_possible EquivalentTo_possible statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 7 (statement_defined_class -> subclassof_possible EquivalentTo_possible statement_class_disjoin statement_class_individuals .)


state 66

    (42) statement_class_individuals -> Individuals statement_class_individuals_check .

    Class           reduce using rule 42 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    $end            reduce using rule 42 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    SubClassOf      reduce using rule 42 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    DisjointClasses reduce using rule 42 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    Individuals     reduce using rule 42 (statement_class_individuals -> Individuals statement_class_individuals_check .)


state 67

    (43) statement_class_individuals_check -> IndividualNames .
    (44) statement_class_individuals_check -> IndividualNames . COMMA statement_class_individuals_check

    Class           reduce using rule 43 (statement_class_individuals_check -> IndividualNames .)
    $end            reduce using rule 43 (statement_class_individuals_check -> IndividualNames .)
    SubClassOf      reduce using rule 43 (statement_class_individuals_check -> IndividualNames .)
    DisjointClasses reduce using rule 43 (statement_class_individuals_check -> IndividualNames .)
    Individuals     reduce using rule 43 (statement_class_individuals_check -> IndividualNames .)
    COMMA           shift and go to state 92


state 68

    (40) statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA . statement_class_disjoin_check
    (39) statement_class_disjoin_check -> . CLASS_IDENTIFIER
    (40) statement_class_disjoin_check -> . CLASS_IDENTIFIER COMMA statement_class_disjoin_check

    CLASS_IDENTIFIER shift and go to state 43

    statement_class_disjoin_check  shift and go to state 93

state 69

    (54) nested -> nested AND nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 54 (nested -> nested AND nested .)
    DisjointClasses reduce using rule 54 (nested -> nested AND nested .)
    Individuals     reduce using rule 54 (nested -> nested AND nested .)
    Class           reduce using rule 54 (nested -> nested AND nested .)
    $end            reduce using rule 54 (nested -> nested AND nested .)
    RIGHT_PAREN     reduce using rule 54 (nested -> nested AND nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 54 (nested -> nested AND nested .) ]
  ! OR              [ reduce using rule 54 (nested -> nested AND nested .) ]


state 70

    (55) nested -> nested OR nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 55 (nested -> nested OR nested .)
    DisjointClasses reduce using rule 55 (nested -> nested OR nested .)
    Individuals     reduce using rule 55 (nested -> nested OR nested .)
    Class           reduce using rule 55 (nested -> nested OR nested .)
    $end            reduce using rule 55 (nested -> nested OR nested .)
    RIGHT_PAREN     reduce using rule 55 (nested -> nested OR nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 55 (nested -> nested OR nested .) ]
  ! OR              [ reduce using rule 55 (nested -> nested OR nested .) ]


state 71

    (18) JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN . statement_defined_class_equivalent statement_class_individuals
    (45) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_defined_class_equivalent shift and go to state 94
    statement_property_identify    shift and go to state 95

state 72

    (67) closed_axiom_mandatory -> CLASS_IDENTIFIER .
    (69) closed_axiom_mandatory -> CLASS_IDENTIFIER . COMMA closed_axiom_mandatory

    SubClassOf      reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    Class           reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    $end            reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    EquivalentTo    reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 96


state 73

    (19) JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent . statement_class_individuals
    (41) statement_class_individuals -> . empty
    (42) statement_class_individuals -> . Individuals statement_class_individuals_check
    (81) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 41
    SubClassOf      reduce using rule 81 (empty -> .)
    DisjointClasses reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

  ! Individuals     [ reduce using rule 81 (empty -> .) ]

    statement_class_individuals    shift and go to state 97
    empty                          shift and go to state 40

state 74

    (66) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .

    SubClassOf      reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    DisjointClasses reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    Individuals     reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    Class           reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    $end            reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    EquivalentTo    reduce using rule 66 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)


state 75

    (45) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (71) statement_property_restriction -> statement_property_identify . SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> statement_property_identify . ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
    (20) statement_reserved_word -> . SOME
    (21) statement_reserved_word -> . EXACTLY
    (22) statement_reserved_word -> . MIN
    (23) statement_reserved_word -> . MAX
    (24) statement_reserved_word -> . OR
    (25) statement_reserved_word -> . ONLY
    (26) statement_reserved_word -> . AND
    (27) statement_reserved_word -> . VALUE

    SOME            shift and go to state 99
    ONLY            shift and go to state 100
    EXACTLY         shift and go to state 55
    MIN             shift and go to state 56
    MAX             shift and go to state 57
    OR              shift and go to state 58
    AND             shift and go to state 59
    VALUE           shift and go to state 52

    statement_reserved_word        shift and go to state 98

state 76

    (68) closed_axiom_mandatory -> statement_property_restriction .
    (70) closed_axiom_mandatory -> statement_property_restriction . COMMA closed_axiom_mandatory

    SubClassOf      reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    DisjointClasses reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    Individuals     reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    Class           reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    $end            reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    EquivalentTo    reduce using rule 68 (closed_axiom_mandatory -> statement_property_restriction .)
    COMMA           shift and go to state 101


state 77

    (79) statement_covered_class_check -> CLASS_IDENTIFIER .
    (80) statement_covered_class_check -> CLASS_IDENTIFIER . OR statement_covered_class_check

    SubClassOf      reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    Class           reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    $end            reduce using rule 79 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    OR              shift and go to state 48


state 78

    (80) statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .

    SubClassOf      reduce using rule 80 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    DisjointClasses reduce using rule 80 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    Individuals     reduce using rule 80 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    Class           reduce using rule 80 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    $end            reduce using rule 80 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)


state 79

    (56) nested -> LEFT_PAREN nested RIGHT_PAREN .

    AND             reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    OR              reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    SubClassOf      reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    DisjointClasses reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    Individuals     reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    Class           reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    $end            reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 56 (nested -> LEFT_PAREN nested RIGHT_PAREN .)


state 80

    (57) nested -> statement_property_identify statement_reserved_word nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    DisjointClasses reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    Individuals     reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    Class           reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    $end            reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    RIGHT_PAREN     reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .) ]
  ! OR              [ reduce using rule 57 (nested -> statement_property_identify statement_reserved_word nested .) ]


state 81

    (58) nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .
    (65) nested -> CLASS_IDENTIFIER .

  ! reduce/reduce conflict for AND resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    AND             reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    OR              reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Individuals     reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Class           reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    $end            reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 58 (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)

  ! AND             [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]


state 82

    (59) nested -> statement_property_identify statement_reserved_word VALUE . CLASS_IDENTIFIER
    (60) nested -> statement_property_identify statement_reserved_word VALUE . nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 102
    LEFT_PAREN      shift and go to state 26
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 27
    nested                         shift and go to state 103

state 83

    (61) nested -> statement_property_identify statement_reserved_word ONLY . CLASS_IDENTIFIER
    (62) nested -> statement_property_identify statement_reserved_word ONLY . nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 104
    LEFT_PAREN      shift and go to state 26
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 27
    nested                         shift and go to state 105

state 84

    (63) nested -> statement_property_identify statement_reserved_word SOME . CLASS_IDENTIFIER
    (64) nested -> statement_property_identify statement_reserved_word SOME . nested
    (54) nested -> . nested AND nested
    (55) nested -> . nested OR nested
    (56) nested -> . LEFT_PAREN nested RIGHT_PAREN
    (57) nested -> . statement_property_identify statement_reserved_word nested
    (58) nested -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (59) nested -> . statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER
    (60) nested -> . statement_property_identify statement_reserved_word VALUE nested
    (61) nested -> . statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER
    (62) nested -> . statement_property_identify statement_reserved_word ONLY nested
    (63) nested -> . statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER
    (64) nested -> . statement_property_identify statement_reserved_word SOME nested
    (65) nested -> . CLASS_IDENTIFIER
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 106
    LEFT_PAREN      shift and go to state 26
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 27
    nested                         shift and go to state 107

state 85

    (75) statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .

    SubClassOf      reduce using rule 75 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    DisjointClasses reduce using rule 75 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    Individuals     reduce using rule 75 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    Class           reduce using rule 75 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 75 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)


state 86

    (77) statement_enumerated_class_check -> IndividualNames COMMA . statement_enumerated_class_check
    (76) statement_enumerated_class_check -> . IndividualNames
    (77) statement_enumerated_class_check -> . IndividualNames COMMA statement_enumerated_class_check

    IndividualNames shift and go to state 61

    statement_enumerated_class_check shift and go to state 108

state 87

    (31) primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .
    (32) primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER . COMMA primitive_class_mandatory

    EquivalentTo    reduce using rule 31 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 31 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Individuals     reduce using rule 31 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Class           reduce using rule 31 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    $end            reduce using rule 31 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    COMMA           shift and go to state 109


state 88

    (33) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE
    (34) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE COMMA primitive_class_mandatory

    DATA_TYPE       shift and go to state 110


state 89

    (35) primitive_class_mandatory -> CLASS_IDENTIFIER .
    (36) primitive_class_mandatory -> CLASS_IDENTIFIER . COMMA primitive_class_mandatory
    (67) closed_axiom_mandatory -> CLASS_IDENTIFIER .
    (69) closed_axiom_mandatory -> CLASS_IDENTIFIER . COMMA closed_axiom_mandatory

  ! reduce/reduce conflict for EquivalentTo resolved using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    EquivalentTo    reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Class           reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    $end            reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 111

  ! EquivalentTo    [ reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 67 (closed_axiom_mandatory -> CLASS_IDENTIFIER .) ]


state 90

    (36) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .

    EquivalentTo    reduce using rule 36 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    DisjointClasses reduce using rule 36 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    Individuals     reduce using rule 36 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    Class           reduce using rule 36 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    $end            reduce using rule 36 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA primitive_class_mandatory .)


state 91

    (31) primitive_class_mandatory -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (71) statement_property_restriction -> statement_property_identify . SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> statement_property_identify . ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
    (20) statement_reserved_word -> . SOME
    (21) statement_reserved_word -> . EXACTLY
    (22) statement_reserved_word -> . MIN
    (23) statement_reserved_word -> . MAX
    (24) statement_reserved_word -> . OR
    (25) statement_reserved_word -> . ONLY
    (26) statement_reserved_word -> . AND
    (27) statement_reserved_word -> . VALUE

    SOME            shift and go to state 99
    ONLY            shift and go to state 100
    EXACTLY         shift and go to state 55
    MIN             shift and go to state 56
    MAX             shift and go to state 57
    OR              shift and go to state 58
    AND             shift and go to state 59
    VALUE           shift and go to state 52

    statement_reserved_word        shift and go to state 62

state 92

    (44) statement_class_individuals_check -> IndividualNames COMMA . statement_class_individuals_check
    (43) statement_class_individuals_check -> . IndividualNames
    (44) statement_class_individuals_check -> . IndividualNames COMMA statement_class_individuals_check

    IndividualNames shift and go to state 67

    statement_class_individuals_check shift and go to state 112

state 93

    (40) statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .

    Individuals     reduce using rule 40 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    Class           reduce using rule 40 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    $end            reduce using rule 40 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)


state 94

    (18) JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent . statement_class_individuals
    (41) statement_class_individuals -> . empty
    (42) statement_class_individuals -> . Individuals statement_class_individuals_check
    (81) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 41
    SubClassOf      reduce using rule 81 (empty -> .)
    DisjointClasses reduce using rule 81 (empty -> .)
    Class           reduce using rule 81 (empty -> .)
    $end            reduce using rule 81 (empty -> .)

  ! Individuals     [ reduce using rule 81 (empty -> .) ]

    statement_class_individuals    shift and go to state 113
    empty                          shift and go to state 40

state 95

    (45) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (20) statement_reserved_word -> . SOME
    (21) statement_reserved_word -> . EXACTLY
    (22) statement_reserved_word -> . MIN
    (23) statement_reserved_word -> . MAX
    (24) statement_reserved_word -> . OR
    (25) statement_reserved_word -> . ONLY
    (26) statement_reserved_word -> . AND
    (27) statement_reserved_word -> . VALUE

    SOME            shift and go to state 54
    EXACTLY         shift and go to state 55
    MIN             shift and go to state 56
    MAX             shift and go to state 57
    OR              shift and go to state 58
    ONLY            shift and go to state 53
    AND             shift and go to state 59
    VALUE           shift and go to state 52

    statement_reserved_word        shift and go to state 98

state 96

    (69) closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA . closed_axiom_mandatory
    (67) closed_axiom_mandatory -> . CLASS_IDENTIFIER
    (68) closed_axiom_mandatory -> . statement_property_restriction
    (69) closed_axiom_mandatory -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (70) closed_axiom_mandatory -> . statement_property_restriction COMMA closed_axiom_mandatory
    (71) statement_property_restriction -> . statement_property_identify SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> . statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 72
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    closed_axiom_mandatory         shift and go to state 114
    statement_property_restriction shift and go to state 76
    statement_property_identify    shift and go to state 115

state 97

    (19) JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .

    SubClassOf      reduce using rule 19 (JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .)
    DisjointClasses reduce using rule 19 (JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .)
    Individuals     reduce using rule 19 (JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .)
    Class           reduce using rule 19 (JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .)
    $end            reduce using rule 19 (JustDefined -> CLASS_IDENTIFIER COMMA statement_defined_class_equivalent statement_class_individuals .)


state 98

    (45) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent

    CLASS_IDENTIFIER shift and go to state 116
    NAMESPACEID     shift and go to state 117


state 99

    (71) statement_property_restriction -> statement_property_identify SOME . CLASS_IDENTIFIER
    (20) statement_reserved_word -> SOME .

  ! shift/reduce conflict for CLASS_IDENTIFIER resolved as shift
    CLASS_IDENTIFIER shift and go to state 118
    NAMESPACEID     reduce using rule 20 (statement_reserved_word -> SOME .)

  ! CLASS_IDENTIFIER [ reduce using rule 20 (statement_reserved_word -> SOME .) ]


state 100

    (72) statement_property_restriction -> statement_property_identify ONLY . LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
    (25) statement_reserved_word -> ONLY .

    LEFT_PAREN      shift and go to state 119
    CLASS_IDENTIFIER reduce using rule 25 (statement_reserved_word -> ONLY .)
    NAMESPACEID     reduce using rule 25 (statement_reserved_word -> ONLY .)


state 101

    (70) closed_axiom_mandatory -> statement_property_restriction COMMA . closed_axiom_mandatory
    (67) closed_axiom_mandatory -> . CLASS_IDENTIFIER
    (68) closed_axiom_mandatory -> . statement_property_restriction
    (69) closed_axiom_mandatory -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (70) closed_axiom_mandatory -> . statement_property_restriction COMMA closed_axiom_mandatory
    (71) statement_property_restriction -> . statement_property_identify SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> . statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 72
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_restriction shift and go to state 76
    closed_axiom_mandatory         shift and go to state 120
    statement_property_identify    shift and go to state 115

state 102

    (59) nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .
    (65) nested -> CLASS_IDENTIFIER .

  ! reduce/reduce conflict for AND resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    AND             reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    OR              reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    Individuals     reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    Class           reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    $end            reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 59 (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER .)

  ! AND             [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]


state 103

    (60) nested -> statement_property_identify statement_reserved_word VALUE nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    DisjointClasses reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    Individuals     reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    Class           reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    $end            reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    RIGHT_PAREN     reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .) ]
  ! OR              [ reduce using rule 60 (nested -> statement_property_identify statement_reserved_word VALUE nested .) ]


state 104

    (61) nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .
    (65) nested -> CLASS_IDENTIFIER .

  ! reduce/reduce conflict for AND resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    AND             reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    OR              reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    Individuals     reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    Class           reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    $end            reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 61 (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER .)

  ! AND             [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]


state 105

    (62) nested -> statement_property_identify statement_reserved_word ONLY nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    DisjointClasses reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    Individuals     reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    Class           reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    $end            reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    RIGHT_PAREN     reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .) ]
  ! OR              [ reduce using rule 62 (nested -> statement_property_identify statement_reserved_word ONLY nested .) ]


state 106

    (63) nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .
    (65) nested -> CLASS_IDENTIFIER .

  ! reduce/reduce conflict for AND resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    AND             reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    OR              reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    Individuals     reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    Class           reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    $end            reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 63 (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER .)

  ! AND             [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 65 (nested -> CLASS_IDENTIFIER .) ]


state 107

    (64) nested -> statement_property_identify statement_reserved_word SOME nested .
    (54) nested -> nested . AND nested
    (55) nested -> nested . OR nested

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    DisjointClasses reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    Individuals     reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    Class           reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    $end            reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    RIGHT_PAREN     reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .)
    AND             shift and go to state 44
    OR              shift and go to state 45

  ! AND             [ reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .) ]
  ! OR              [ reduce using rule 64 (nested -> statement_property_identify statement_reserved_word SOME nested .) ]


state 108

    (77) statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check .

    RIGHT_CURLY_BRACKET reduce using rule 77 (statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check .)


state 109

    (32) primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA . primitive_class_mandatory
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 121
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 35
    primitive_class_mandatory      shift and go to state 122

state 110

    (33) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .
    (34) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE . COMMA primitive_class_mandatory

    EquivalentTo    reduce using rule 33 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    DisjointClasses reduce using rule 33 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    Individuals     reduce using rule 33 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    Class           reduce using rule 33 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    $end            reduce using rule 33 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    COMMA           shift and go to state 123


state 111

    (36) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA . primitive_class_mandatory
    (69) closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA . closed_axiom_mandatory
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (67) closed_axiom_mandatory -> . CLASS_IDENTIFIER
    (68) closed_axiom_mandatory -> . statement_property_restriction
    (69) closed_axiom_mandatory -> . CLASS_IDENTIFIER COMMA closed_axiom_mandatory
    (70) closed_axiom_mandatory -> . statement_property_restriction COMMA closed_axiom_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER
    (71) statement_property_restriction -> . statement_property_identify SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> . statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN

    CLASS_IDENTIFIER shift and go to state 89
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    primitive_class_mandatory      shift and go to state 90
    closed_axiom_mandatory         shift and go to state 114
    statement_property_identify    shift and go to state 91
    statement_property_restriction shift and go to state 76

state 112

    (44) statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .

    Class           reduce using rule 44 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    $end            reduce using rule 44 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    SubClassOf      reduce using rule 44 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    DisjointClasses reduce using rule 44 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    Individuals     reduce using rule 44 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)


state 113

    (18) JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .

    SubClassOf      reduce using rule 18 (JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .)
    DisjointClasses reduce using rule 18 (JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .)
    Individuals     reduce using rule 18 (JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .)
    Class           reduce using rule 18 (JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .)
    $end            reduce using rule 18 (JustDefined -> CLASS_IDENTIFIER AND LEFT_PAREN statement_defined_class_equivalent statement_class_individuals .)


state 114

    (69) closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .

    SubClassOf      reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    DisjointClasses reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    Individuals     reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    Class           reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    $end            reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)
    EquivalentTo    reduce using rule 69 (closed_axiom_mandatory -> CLASS_IDENTIFIER COMMA closed_axiom_mandatory .)


state 115

    (71) statement_property_restriction -> statement_property_identify . SOME CLASS_IDENTIFIER
    (72) statement_property_restriction -> statement_property_identify . ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN

    SOME            shift and go to state 124
    ONLY            shift and go to state 125


state 116

    (45) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER . RIGHT_PAREN
    (46) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER . RIGHT_PAREN COMMA statement_defined_class_equivalent

    RIGHT_PAREN     shift and go to state 126


state 117

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent

    DATA_TYPE       shift and go to state 127


state 118

    (71) statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .

    COMMA           reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    Individuals     reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    Class           reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    $end            reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)
    EquivalentTo    reduce using rule 71 (statement_property_restriction -> statement_property_identify SOME CLASS_IDENTIFIER .)


state 119

    (72) statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN . closed_axiom_restriction_combination RIGHT_PAREN
    (73) closed_axiom_restriction_combination -> . CLASS_IDENTIFIER
    (74) closed_axiom_restriction_combination -> . CLASS_IDENTIFIER OR closed_axiom_restriction_combination

    CLASS_IDENTIFIER shift and go to state 129

    closed_axiom_restriction_combination shift and go to state 128

state 120

    (70) closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .

    SubClassOf      reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)
    DisjointClasses reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)
    Individuals     reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)
    Class           reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)
    $end            reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)
    EquivalentTo    reduce using rule 70 (closed_axiom_mandatory -> statement_property_restriction COMMA closed_axiom_mandatory .)


state 121

    (35) primitive_class_mandatory -> CLASS_IDENTIFIER .
    (36) primitive_class_mandatory -> CLASS_IDENTIFIER . COMMA primitive_class_mandatory

    EquivalentTo    reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Class           reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    $end            reduce using rule 35 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 130


state 122

    (32) primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .

    EquivalentTo    reduce using rule 32 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    DisjointClasses reduce using rule 32 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    Individuals     reduce using rule 32 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    Class           reduce using rule 32 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .)
    $end            reduce using rule 32 (primitive_class_mandatory -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory .)


state 123

    (34) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA . primitive_class_mandatory
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 121
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 35
    primitive_class_mandatory      shift and go to state 131

state 124

    (71) statement_property_restriction -> statement_property_identify SOME . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 118


state 125

    (72) statement_property_restriction -> statement_property_identify ONLY . LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN

    LEFT_PAREN      shift and go to state 119


state 126

    (45) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .
    (46) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN . COMMA statement_defined_class_equivalent

    Individuals     reduce using rule 45 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .)
    SubClassOf      reduce using rule 45 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .)
    DisjointClasses reduce using rule 45 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .)
    Class           reduce using rule 45 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 45 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN .)
    COMMA           shift and go to state 132


state 127

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE . LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE . LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent

    LEFT_BRACKET    shift and go to state 133


state 128

    (72) statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 134


state 129

    (73) closed_axiom_restriction_combination -> CLASS_IDENTIFIER .
    (74) closed_axiom_restriction_combination -> CLASS_IDENTIFIER . OR closed_axiom_restriction_combination

    RIGHT_PAREN     reduce using rule 73 (closed_axiom_restriction_combination -> CLASS_IDENTIFIER .)
    OR              shift and go to state 135


state 130

    (36) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA . primitive_class_mandatory
    (31) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (32) primitive_class_mandatory -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (33) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (34) primitive_class_mandatory -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory
    (35) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (36) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA primitive_class_mandatory
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 121
    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    primitive_class_mandatory      shift and go to state 90
    statement_property_identify    shift and go to state 35

state 131

    (34) primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .

    EquivalentTo    reduce using rule 34 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .)
    DisjointClasses reduce using rule 34 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .)
    Individuals     reduce using rule 34 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .)
    Class           reduce using rule 34 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .)
    $end            reduce using rule 34 (primitive_class_mandatory -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE COMMA primitive_class_mandatory .)


state 132

    (46) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA . statement_defined_class_equivalent
    (45) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 95
    statement_defined_class_equivalent shift and go to state 136

state 133

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET . statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET . statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (49) statement_operator_symbol -> . LESS_THAN
    (50) statement_operator_symbol -> . GREATER_THAN
    (51) statement_operator_symbol -> . EQUALS
    (52) statement_operator_symbol -> . GREATER_THAN EQUALS
    (53) statement_operator_symbol -> . LESS_THAN EQUALS

    LESS_THAN       shift and go to state 138
    GREATER_THAN    shift and go to state 139
    EQUALS          shift and go to state 140

    statement_operator_symbol      shift and go to state 137

state 134

    (72) statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .

    COMMA           reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    SubClassOf      reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    DisjointClasses reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    Individuals     reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    Class           reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    $end            reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)
    EquivalentTo    reduce using rule 72 (statement_property_restriction -> statement_property_identify ONLY LEFT_PAREN closed_axiom_restriction_combination RIGHT_PAREN .)


state 135

    (74) closed_axiom_restriction_combination -> CLASS_IDENTIFIER OR . closed_axiom_restriction_combination
    (73) closed_axiom_restriction_combination -> . CLASS_IDENTIFIER
    (74) closed_axiom_restriction_combination -> . CLASS_IDENTIFIER OR closed_axiom_restriction_combination

    CLASS_IDENTIFIER shift and go to state 129

    closed_axiom_restriction_combination shift and go to state 141

state 136

    (46) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .

    Individuals     reduce using rule 46 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    SubClassOf      reduce using rule 46 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    DisjointClasses reduce using rule 46 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    Class           reduce using rule 46 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    $end            reduce using rule 46 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent .)


state 137

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol . NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol . NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent

    NUMBER          shift and go to state 142


state 138

    (49) statement_operator_symbol -> LESS_THAN .
    (53) statement_operator_symbol -> LESS_THAN . EQUALS

    NUMBER          reduce using rule 49 (statement_operator_symbol -> LESS_THAN .)
    EQUALS          shift and go to state 143


state 139

    (50) statement_operator_symbol -> GREATER_THAN .
    (52) statement_operator_symbol -> GREATER_THAN . EQUALS

    NUMBER          reduce using rule 50 (statement_operator_symbol -> GREATER_THAN .)
    EQUALS          shift and go to state 144


state 140

    (51) statement_operator_symbol -> EQUALS .

    NUMBER          reduce using rule 51 (statement_operator_symbol -> EQUALS .)


state 141

    (74) closed_axiom_restriction_combination -> CLASS_IDENTIFIER OR closed_axiom_restriction_combination .

    RIGHT_PAREN     reduce using rule 74 (closed_axiom_restriction_combination -> CLASS_IDENTIFIER OR closed_axiom_restriction_combination .)


state 142

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER . RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER . RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent

    RIGHT_BRACKET   shift and go to state 145


state 143

    (53) statement_operator_symbol -> LESS_THAN EQUALS .

    NUMBER          reduce using rule 53 (statement_operator_symbol -> LESS_THAN EQUALS .)


state 144

    (52) statement_operator_symbol -> GREATER_THAN EQUALS .

    NUMBER          reduce using rule 52 (statement_operator_symbol -> GREATER_THAN EQUALS .)


state 145

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET . RIGHT_PAREN
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET . RIGHT_PAREN COMMA statement_defined_class_equivalent

    RIGHT_PAREN     shift and go to state 146


state 146

    (47) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .
    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN . COMMA statement_defined_class_equivalent

    Individuals     reduce using rule 47 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .)
    SubClassOf      reduce using rule 47 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .)
    DisjointClasses reduce using rule 47 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .)
    Class           reduce using rule 47 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .)
    $end            reduce using rule 47 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN .)
    COMMA           shift and go to state 147


state 147

    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA . statement_defined_class_equivalent
    (45) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
    (46) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
    (47) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
    (48) statement_defined_class_equivalent -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
    (28) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (29) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (30) statement_property_identify -> . PROPERTY_IDENTIFIER

    PROPERTY_IDENTIFIER_has shift and go to state 30
    PROPERTY_IDENTIFIER_is_Of shift and go to state 31
    PROPERTY_IDENTIFIER shift and go to state 32

    statement_property_identify    shift and go to state 95
    statement_defined_class_equivalent shift and go to state 148

state 148

    (48) statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .

    Individuals     reduce using rule 48 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    SubClassOf      reduce using rule 48 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    DisjointClasses reduce using rule 48 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    Class           reduce using rule 48 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .)
    $end            reduce using rule 48 (statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: shift/reduce conflict for OR in state 25 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 94 resolved as shift
WARNING: shift/reduce conflict for CLASS_IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statements -> Class CLASS_IDENTIFIER statement_defined_class)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (statements -> Class CLASS_IDENTIFIER statement_primitive_class)
WARNING: rejected rule (empty -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 25 resolved using rule (nested -> CLASS_IDENTIFIER)
WARNING: rejected rule (statement_covered_class_check -> CLASS_IDENTIFIER) in state 25
WARNING: reduce/reduce conflict in state 81 resolved using rule (nested -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER)
WARNING: rejected rule (nested -> CLASS_IDENTIFIER) in state 81
WARNING: reduce/reduce conflict in state 89 resolved using rule (primitive_class_mandatory -> CLASS_IDENTIFIER)
WARNING: rejected rule (closed_axiom_mandatory -> CLASS_IDENTIFIER) in state 89
WARNING: reduce/reduce conflict in state 102 resolved using rule (nested -> statement_property_identify statement_reserved_word VALUE CLASS_IDENTIFIER)
WARNING: rejected rule (nested -> CLASS_IDENTIFIER) in state 102
WARNING: reduce/reduce conflict in state 104 resolved using rule (nested -> statement_property_identify statement_reserved_word ONLY CLASS_IDENTIFIER)
WARNING: rejected rule (nested -> CLASS_IDENTIFIER) in state 104
WARNING: reduce/reduce conflict in state 106 resolved using rule (nested -> statement_property_identify statement_reserved_word SOME CLASS_IDENTIFIER)
WARNING: rejected rule (nested -> CLASS_IDENTIFIER) in state 106
