Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALL
    DIVIDE
    Literal
    MINUS
    NCName
    NMTOKEN
    NOT
    Name
    PLUS
    PlainLiteral
    THAT
    TIMES
    XMLLiteral
    anyURI
    base64Binary
    boolean
    byte
    dateTime
    dateTimeStamp
    decimal
    double
    float
    hexBinary
    int
    integer
    langString
    languague
    long
    negativeInteger
    nonNegativeInteger
    owl
    rational
    rdf
    rdfs
    real
    string
    xsd

Grammar

Rule 0     S' -> statements
Rule 1     statements -> Class CLASS_IDENTIFIER statement_defined_class statements
Rule 2     statements -> Class CLASS_IDENTIFIER statement_defined_class
Rule 3     statements -> Class CLASS_IDENTIFIER statement_primitive_class
Rule 4     statements -> Class CLASS_IDENTIFIER statement_primitive_class statements
Rule 5     statements -> empty
Rule 6     statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals
Rule 7     statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals
Rule 8     EquivalentTo_possible -> EquivalentTo nested
Rule 9     EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class
Rule 10    EquivalentTo_possible -> EquivalentTo statement_enumerated_class
Rule 11    EquivalentTo_possible -> EquivalentTo statement_covered_class
Rule 12    EquivalentTo_possible -> EquivalentTo JustDefined
Rule 13    maybe_suclassof -> subclassof_possible
Rule 14    maybe_suclassof -> empty
Rule 15    subclassof_possible -> SubClassOf nested
Rule 16    subclassof_possible -> SubClassOf statement_closed_axiom_class
Rule 17    subclassof_possible -> SubClassOf statement_enumerated_class
Rule 18    subclassof_possible -> SubClassOf statement_covered_class
Rule 19    subclassof_possible -> SubClassOf primitive_class_mandatory
Rule 20    JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals
Rule 21    JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals
Rule 22    JustDefined -> expression statement_class_disjoin statement_class_individuals
Rule 23    JustDefined -> CLASS_IDENTIFIER
Rule 24    JustDefined -> empty
Rule 25    operators -> MIN
Rule 26    operators -> MAX
Rule 27    operators -> EXACTLY
Rule 28    statement_reserved_word -> SOME
Rule 29    statement_reserved_word -> OR
Rule 30    statement_reserved_word -> AND
Rule 31    statement_reserved_word -> VALUE
Rule 32    statement_others_reserved_word -> SOME
Rule 33    statement_others_reserved_word -> MIN
Rule 34    statement_others_reserved_word -> ONLY
Rule 35    statement_others_reserved_word -> EXACTLY
Rule 36    statement_others_reserved_word -> OR
Rule 37    statement_others_reserved_word -> MAX
Rule 38    statement_others_reserved_word -> AND
Rule 39    statement_property_identify -> PROPERTY_IDENTIFIER_has
Rule 40    statement_property_identify -> PROPERTY_IDENTIFIER_is_Of
Rule 41    statement_property_identify -> PROPERTY_IDENTIFIER
Rule 42    primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals
Rule 43    primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals
Rule 44    primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals
Rule 45    primitive_class_mandatory -> CLASS_IDENTIFIER
Rule 46    primitive_class_mandatory -> empty
Rule 47    statement_class_disjoin -> empty
Rule 48    statement_class_disjoin -> DisjointClasses statement_class_disjoin_check
Rule 49    statement_class_disjoin -> DisjointWith statement_class_disjoin_check
Rule 50    statement_class_disjoin_check -> CLASS_IDENTIFIER
Rule 51    statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check
Rule 52    statement_class_individuals -> empty
Rule 53    statement_class_individuals -> Individuals statement_class_individuals_check
Rule 54    statement_class_individuals_check -> IndividualNames
Rule 55    statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check
Rule 56    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN
Rule 57    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER RIGHT_PAREN COMMA statement_defined_class_equivalent
Rule 58    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN
Rule 59    statement_defined_class_equivalent -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET RIGHT_PAREN COMMA statement_defined_class_equivalent
Rule 60    statement_operator_symbol -> LESS_THAN
Rule 61    statement_operator_symbol -> GREATER_THAN
Rule 62    statement_operator_symbol -> EQUALS
Rule 63    statement_operator_symbol -> GREATER_THAN EQUALS
Rule 64    statement_operator_symbol -> LESS_THAN EQUALS
Rule 65    usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER
Rule 66    usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
Rule 67    usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
Rule 68    usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER
Rule 69    usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
Rule 70    usually_inside_paren -> statement_property_identify
Rule 71    usually_others_paren -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
Rule 72    usually_others_paren -> statement_property_identify statement_others_reserved_word LEFT_PAREN usually_others_others_paren
Rule 73    usually_others_paren -> statement_property_identify statement_others_reserved_word NAMESPACEID DATA_TYPE
Rule 74    usually_others_paren -> statement_property_identify statement_others_reserved_word NUMBER NAMESPACEID DATA_TYPE
Rule 75    usually_others_paren -> statement_property_identify statement_others_reserved_word NUMBER CLASS_IDENTIFIER
Rule 76    usually_others_paren -> statement_property_identify statement_others_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
Rule 77    usually_others_others_paren -> CLASS_IDENTIFIER RIGHT_PAREN
Rule 78    usually_others_others_paren -> CLASS_IDENTIFIER OR usually_others_others_paren
Rule 79    simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN
Rule 80    simple_other_paren -> LEFT_PAREN usually_others_paren RIGHT_PAREN
Rule 81    expression_only -> CLASS_IDENTIFIER OR expression_only
Rule 82    expression_only -> CLASS_IDENTIFIER
Rule 83    expression -> usually_inside_paren
Rule 84    expression -> usually_inside_paren COMMA expression
Rule 85    expression -> simple_paren
Rule 86    expression -> simple_paren COMMA expression
Rule 87    expression -> simple_paren AND expression
Rule 88    other_expression -> usually_inside_paren
Rule 89    other_expression -> usually_others_paren
Rule 90    other_expression -> usually_inside_paren COMMA other_expression
Rule 91    other_expression -> usually_others_paren COMMA other_expression
Rule 92    other_expression -> simple_other_paren
Rule 93    other_expression -> simple_other_paren COMMA other_expression
Rule 94    other_expression -> simple_other_paren AND other_expression
Rule 95    other_expression -> usually_others_paren AND other_expression
Rule 96    other_expression -> usually_inside_paren AND other_expression
Rule 97    nested -> CLASS_IDENTIFIER AND nested_descriptions
Rule 98    nested -> CLASS_IDENTIFIER COMMA nested_descriptions
Rule 99    nested_descriptions -> nested_descriptions AND nested_descriptions
Rule 100   nested_descriptions -> nested_descriptions OR nested_descriptions
Rule 101   nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN
Rule 102   nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions
Rule 103   nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
Rule 104   nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
Rule 105   nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames
Rule 106   nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
Rule 107   nested_descriptions -> statement_property_identify VALUE IndividualNames
Rule 108   nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER
Rule 109   nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions
Rule 110   nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
Rule 111   nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
Rule 112   nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions
Rule 113   nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
Rule 114   nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions
Rule 115   nested_descriptions -> CLASS_IDENTIFIER
Rule 116   axiom_function -> CLASS_IDENTIFIER
Rule 117   axiom_function -> CLASS_IDENTIFIER OR axiom_function
Rule 118   statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
Rule 119   statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
Rule 120   statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
Rule 121   statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function
Rule 122   statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function
Rule 123   statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function
Rule 124   statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET
Rule 125   statement_enumerated_class_check -> IndividualNames
Rule 126   statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check
Rule 127   statement_covered_class -> statement_covered_class_check
Rule 128   statement_covered_class_check -> CLASS_IDENTIFIER
Rule 129   statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check
Rule 130   empty -> <empty>

Terminals, with rules where they appear

ALL                  : 
AND                  : 21 30 38 43 87 94 95 96 97 99 119 122
CLASS_IDENTIFIER     : 1 2 3 4 20 21 23 42 43 45 50 51 56 57 65 68 71 75 77 78 81 82 97 98 103 104 106 108 111 113 115 116 117 118 119 120 121 122 123 128 129
COMMA                : 20 42 51 55 57 59 84 86 90 91 93 98 118 121 126
Class                : 1 2 3 4
DATA_TYPE            : 58 59 66 67 69 73 74 76
DIVIDE               : 
DisjointClasses      : 48
DisjointWith         : 49
EQUALS               : 62 63 64
EXACTLY              : 27 35
EquivalentTo         : 8 9 10 11 12
GREATER_THAN         : 61 63
IndividualNames      : 54 55 105 107 125 126
Individuals          : 53
LEFT_BRACKET         : 58 59 69 76
LEFT_CURLY_BRACKET   : 124
LEFT_PAREN           : 72 79 80 101 118 119 120
LESS_THAN            : 60 64
Literal              : 
MAX                  : 26 37
MIN                  : 25 33
MINUS                : 
NAMESPACEID          : 58 59 66 67 69 73 74 76
NCName               : 
NMTOKEN              : 
NOT                  : 
NUMBER               : 58 59 67 68 69 74 75 76 110
Name                 : 
ONLY                 : 34 111 112 118 119 120 121 122 123
OR                   : 29 36 78 81 100 117 129
PLUS                 : 
PROPERTY_IDENTIFIER  : 41
PROPERTY_IDENTIFIER_has : 39
PROPERTY_IDENTIFIER_is_Of : 40
PlainLiteral         : 
RIGHT_BRACKET        : 58 59 69 76
RIGHT_CURLY_BRACKET  : 124
RIGHT_PAREN          : 56 57 58 59 77 79 80 101 118 119 120
SOME                 : 28 32 113 114
SubClassOf           : 15 16 17 18 19
THAT                 : 
TIMES                : 
VALUE                : 31 104 105 107 108 109
XMLLiteral           : 
anyURI               : 
base64Binary         : 
boolean              : 
byte                 : 
dateTime             : 
dateTimeStamp        : 
decimal              : 
double               : 
error                : 
float                : 
hexBinary            : 
int                  : 
integer              : 
langString           : 
languague            : 
long                 : 
negativeInteger      : 
nonNegativeInteger   : 
owl                  : 
rational             : 
rdf                  : 
rdfs                 : 
real                 : 
string               : 
xsd                  : 

Nonterminals, with rules where they appear

EquivalentTo_possible : 6
JustDefined          : 12
axiom_function       : 117 118 119 120 121 122 123
empty                : 5 14 24 46 47 52
expression           : 20 21 22 42 43 44 84 86 87 118 119 120 121 122 123
expression_only      : 81
maybe_suclassof      : 6
nested               : 8 15
nested_descriptions  : 97 98 99 99 100 100 101 102 106 109 110 112 114
operators            : 67 68
other_expression     : 90 91 93 94 95 96
primitive_class_mandatory : 19
simple_other_paren   : 92 93 94
simple_paren         : 85 86 87
statement_class_disjoin : 6 7 20 21 22 42 43 44
statement_class_disjoin_check : 48 49 51
statement_class_individuals : 6 7 20 21 22 42 43 44
statement_class_individuals_check : 53 55
statement_closed_axiom_class : 9 16
statement_covered_class : 11 18
statement_covered_class_check : 127 129
statement_defined_class : 1 2
statement_defined_class_equivalent : 57 59
statement_enumerated_class : 10 17
statement_enumerated_class_check : 124 126
statement_operator_symbol : 58 59 69 76
statement_others_reserved_word : 71 72 73 74 75 76 102 103 104 105 106 109 110 111 112 113 114
statement_primitive_class : 3 4
statement_property_identify : 56 57 58 59 65 66 67 68 69 70 71 72 73 74 75 76 102 103 104 105 107 108 109 110 111 112 113 114
statement_reserved_word : 56 57 58 59 65 66 69
statements           : 1 4 0
subclassof_possible  : 7 13
usually_inside_paren : 79 83 84 88 90 96
usually_others_others_paren : 72 78
usually_others_paren : 80 89 91 95

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (130) empty -> .

    Class           shift and go to state 2
    $end            reduce using rule 130 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 3

state 1

    (0) S' -> statements .



state 2

    (1) statements -> Class . CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> Class . CLASS_IDENTIFIER statement_defined_class
    (3) statements -> Class . CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> Class . CLASS_IDENTIFIER statement_primitive_class statements

    CLASS_IDENTIFIER shift and go to state 4


state 3

    (5) statements -> empty .

    $end            reduce using rule 5 (statements -> empty .)


state 4

    (1) statements -> Class CLASS_IDENTIFIER . statement_defined_class statements
    (2) statements -> Class CLASS_IDENTIFIER . statement_defined_class
    (3) statements -> Class CLASS_IDENTIFIER . statement_primitive_class
    (4) statements -> Class CLASS_IDENTIFIER . statement_primitive_class statements
    (6) statement_defined_class -> . EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals
    (7) statement_primitive_class -> . subclassof_possible statement_class_disjoin statement_class_individuals
    (8) EquivalentTo_possible -> . EquivalentTo nested
    (9) EquivalentTo_possible -> . EquivalentTo statement_closed_axiom_class
    (10) EquivalentTo_possible -> . EquivalentTo statement_enumerated_class
    (11) EquivalentTo_possible -> . EquivalentTo statement_covered_class
    (12) EquivalentTo_possible -> . EquivalentTo JustDefined
    (15) subclassof_possible -> . SubClassOf nested
    (16) subclassof_possible -> . SubClassOf statement_closed_axiom_class
    (17) subclassof_possible -> . SubClassOf statement_enumerated_class
    (18) subclassof_possible -> . SubClassOf statement_covered_class
    (19) subclassof_possible -> . SubClassOf primitive_class_mandatory

    EquivalentTo    shift and go to state 9
    SubClassOf      shift and go to state 10

    statement_defined_class        shift and go to state 5
    statement_primitive_class      shift and go to state 6
    EquivalentTo_possible          shift and go to state 7
    subclassof_possible            shift and go to state 8

state 5

    (1) statements -> Class CLASS_IDENTIFIER statement_defined_class . statements
    (2) statements -> Class CLASS_IDENTIFIER statement_defined_class .
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (130) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (statements -> Class CLASS_IDENTIFIER statement_defined_class .)
    $end            reduce using rule 2 (statements -> Class CLASS_IDENTIFIER statement_defined_class .)
    Class           shift and go to state 2

  ! $end            [ reduce using rule 130 (empty -> .) ]

    statements                     shift and go to state 11
    empty                          shift and go to state 3

state 6

    (3) statements -> Class CLASS_IDENTIFIER statement_primitive_class .
    (4) statements -> Class CLASS_IDENTIFIER statement_primitive_class . statements
    (1) statements -> . Class CLASS_IDENTIFIER statement_defined_class statements
    (2) statements -> . Class CLASS_IDENTIFIER statement_defined_class
    (3) statements -> . Class CLASS_IDENTIFIER statement_primitive_class
    (4) statements -> . Class CLASS_IDENTIFIER statement_primitive_class statements
    (5) statements -> . empty
    (130) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 3 (statements -> Class CLASS_IDENTIFIER statement_primitive_class .)
    $end            reduce using rule 3 (statements -> Class CLASS_IDENTIFIER statement_primitive_class .)
    Class           shift and go to state 2

  ! $end            [ reduce using rule 130 (empty -> .) ]

    statements                     shift and go to state 12
    empty                          shift and go to state 3

state 7

    (6) statement_defined_class -> EquivalentTo_possible . maybe_suclassof statement_class_disjoin statement_class_individuals
    (13) maybe_suclassof -> . subclassof_possible
    (14) maybe_suclassof -> . empty
    (15) subclassof_possible -> . SubClassOf nested
    (16) subclassof_possible -> . SubClassOf statement_closed_axiom_class
    (17) subclassof_possible -> . SubClassOf statement_enumerated_class
    (18) subclassof_possible -> . SubClassOf statement_covered_class
    (19) subclassof_possible -> . SubClassOf primitive_class_mandatory
    (130) empty -> .

    SubClassOf      shift and go to state 10
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    maybe_suclassof                shift and go to state 13
    subclassof_possible            shift and go to state 14
    empty                          shift and go to state 15

state 8

    (7) statement_primitive_class -> subclassof_possible . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    statement_class_disjoin        shift and go to state 16
    empty                          shift and go to state 17

state 9

    (8) EquivalentTo_possible -> EquivalentTo . nested
    (9) EquivalentTo_possible -> EquivalentTo . statement_closed_axiom_class
    (10) EquivalentTo_possible -> EquivalentTo . statement_enumerated_class
    (11) EquivalentTo_possible -> EquivalentTo . statement_covered_class
    (12) EquivalentTo_possible -> EquivalentTo . JustDefined
    (97) nested -> . CLASS_IDENTIFIER AND nested_descriptions
    (98) nested -> . CLASS_IDENTIFIER COMMA nested_descriptions
    (118) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (119) statement_closed_axiom_class -> . CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (120) statement_closed_axiom_class -> . CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA expression ONLY axiom_function
    (122) statement_closed_axiom_class -> . CLASS_IDENTIFIER AND expression ONLY axiom_function
    (123) statement_closed_axiom_class -> . CLASS_IDENTIFIER expression ONLY axiom_function
    (124) statement_enumerated_class -> . LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET
    (127) statement_covered_class -> . statement_covered_class_check
    (20) JustDefined -> . CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals
    (21) JustDefined -> . CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals
    (22) JustDefined -> . expression statement_class_disjoin statement_class_individuals
    (23) JustDefined -> . CLASS_IDENTIFIER
    (24) JustDefined -> . empty
    (128) statement_covered_class_check -> . CLASS_IDENTIFIER
    (129) statement_covered_class_check -> . CLASS_IDENTIFIER OR statement_covered_class_check
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (130) empty -> .
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 25
    LEFT_CURLY_BRACKET shift and go to state 28
    SubClassOf      reduce using rule 130 (empty -> .)
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)
    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested                         shift and go to state 20
    statement_closed_axiom_class   shift and go to state 21
    statement_enumerated_class     shift and go to state 22
    statement_covered_class        shift and go to state 23
    JustDefined                    shift and go to state 24
    expression                     shift and go to state 26
    statement_covered_class_check  shift and go to state 29
    empty                          shift and go to state 30
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32
    statement_property_identify    shift and go to state 33

state 10

    (15) subclassof_possible -> SubClassOf . nested
    (16) subclassof_possible -> SubClassOf . statement_closed_axiom_class
    (17) subclassof_possible -> SubClassOf . statement_enumerated_class
    (18) subclassof_possible -> SubClassOf . statement_covered_class
    (19) subclassof_possible -> SubClassOf . primitive_class_mandatory
    (97) nested -> . CLASS_IDENTIFIER AND nested_descriptions
    (98) nested -> . CLASS_IDENTIFIER COMMA nested_descriptions
    (118) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (119) statement_closed_axiom_class -> . CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (120) statement_closed_axiom_class -> . CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> . CLASS_IDENTIFIER COMMA expression ONLY axiom_function
    (122) statement_closed_axiom_class -> . CLASS_IDENTIFIER AND expression ONLY axiom_function
    (123) statement_closed_axiom_class -> . CLASS_IDENTIFIER expression ONLY axiom_function
    (124) statement_enumerated_class -> . LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET
    (127) statement_covered_class -> . statement_covered_class_check
    (42) primitive_class_mandatory -> . CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals
    (43) primitive_class_mandatory -> . CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals
    (44) primitive_class_mandatory -> . expression statement_class_disjoin statement_class_individuals
    (45) primitive_class_mandatory -> . CLASS_IDENTIFIER
    (46) primitive_class_mandatory -> . empty
    (128) statement_covered_class_check -> . CLASS_IDENTIFIER
    (129) statement_covered_class_check -> . CLASS_IDENTIFIER OR statement_covered_class_check
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (130) empty -> .
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 42
    LEFT_CURLY_BRACKET shift and go to state 28
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)
    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested                         shift and go to state 37
    statement_closed_axiom_class   shift and go to state 38
    statement_enumerated_class     shift and go to state 39
    statement_covered_class        shift and go to state 40
    primitive_class_mandatory      shift and go to state 41
    expression                     shift and go to state 43
    statement_covered_class_check  shift and go to state 29
    empty                          shift and go to state 44
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32
    statement_property_identify    shift and go to state 33

state 11

    (1) statements -> Class CLASS_IDENTIFIER statement_defined_class statements .

    $end            reduce using rule 1 (statements -> Class CLASS_IDENTIFIER statement_defined_class statements .)


state 12

    (4) statements -> Class CLASS_IDENTIFIER statement_primitive_class statements .

    $end            reduce using rule 4 (statements -> Class CLASS_IDENTIFIER statement_primitive_class statements .)


state 13

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    statement_class_disjoin        shift and go to state 45
    empty                          shift and go to state 17

state 14

    (13) maybe_suclassof -> subclassof_possible .

    DisjointClasses reduce using rule 13 (maybe_suclassof -> subclassof_possible .)
    DisjointWith    reduce using rule 13 (maybe_suclassof -> subclassof_possible .)
    Individuals     reduce using rule 13 (maybe_suclassof -> subclassof_possible .)
    Class           reduce using rule 13 (maybe_suclassof -> subclassof_possible .)
    $end            reduce using rule 13 (maybe_suclassof -> subclassof_possible .)


state 15

    (14) maybe_suclassof -> empty .

    DisjointClasses reduce using rule 14 (maybe_suclassof -> empty .)
    DisjointWith    reduce using rule 14 (maybe_suclassof -> empty .)
    Individuals     reduce using rule 14 (maybe_suclassof -> empty .)
    Class           reduce using rule 14 (maybe_suclassof -> empty .)
    $end            reduce using rule 14 (maybe_suclassof -> empty .)


state 16

    (7) statement_primitive_class -> subclassof_possible statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

    Individuals     shift and go to state 48
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    statement_class_individuals    shift and go to state 46
    empty                          shift and go to state 47

state 17

    (47) statement_class_disjoin -> empty .

    Individuals     reduce using rule 47 (statement_class_disjoin -> empty .)
    Class           reduce using rule 47 (statement_class_disjoin -> empty .)
    $end            reduce using rule 47 (statement_class_disjoin -> empty .)
    SubClassOf      reduce using rule 47 (statement_class_disjoin -> empty .)
    DisjointClasses reduce using rule 47 (statement_class_disjoin -> empty .)
    DisjointWith    reduce using rule 47 (statement_class_disjoin -> empty .)


state 18

    (48) statement_class_disjoin -> DisjointClasses . statement_class_disjoin_check
    (50) statement_class_disjoin_check -> . CLASS_IDENTIFIER
    (51) statement_class_disjoin_check -> . CLASS_IDENTIFIER COMMA statement_class_disjoin_check

    CLASS_IDENTIFIER shift and go to state 50

    statement_class_disjoin_check  shift and go to state 49

state 19

    (49) statement_class_disjoin -> DisjointWith . statement_class_disjoin_check
    (50) statement_class_disjoin_check -> . CLASS_IDENTIFIER
    (51) statement_class_disjoin_check -> . CLASS_IDENTIFIER COMMA statement_class_disjoin_check

    CLASS_IDENTIFIER shift and go to state 50

    statement_class_disjoin_check  shift and go to state 51

state 20

    (8) EquivalentTo_possible -> EquivalentTo nested .

    SubClassOf      reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)
    DisjointClasses reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)
    DisjointWith    reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)
    Individuals     reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)
    Class           reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)
    $end            reduce using rule 8 (EquivalentTo_possible -> EquivalentTo nested .)


state 21

    (9) EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .

    SubClassOf      reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    DisjointClasses reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    DisjointWith    reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    Individuals     reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    Class           reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)
    $end            reduce using rule 9 (EquivalentTo_possible -> EquivalentTo statement_closed_axiom_class .)


state 22

    (10) EquivalentTo_possible -> EquivalentTo statement_enumerated_class .

    SubClassOf      reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    DisjointClasses reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    DisjointWith    reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    Individuals     reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    Class           reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)
    $end            reduce using rule 10 (EquivalentTo_possible -> EquivalentTo statement_enumerated_class .)


state 23

    (11) EquivalentTo_possible -> EquivalentTo statement_covered_class .

    SubClassOf      reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    DisjointClasses reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    DisjointWith    reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    Individuals     reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    Class           reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)
    $end            reduce using rule 11 (EquivalentTo_possible -> EquivalentTo statement_covered_class .)


state 24

    (12) EquivalentTo_possible -> EquivalentTo JustDefined .

    SubClassOf      reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    DisjointClasses reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    DisjointWith    reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    Individuals     reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    Class           reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)
    $end            reduce using rule 12 (EquivalentTo_possible -> EquivalentTo JustDefined .)


state 25

    (97) nested -> CLASS_IDENTIFIER . AND nested_descriptions
    (98) nested -> CLASS_IDENTIFIER . COMMA nested_descriptions
    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER . AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA expression ONLY axiom_function
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER . AND expression ONLY axiom_function
    (123) statement_closed_axiom_class -> CLASS_IDENTIFIER . expression ONLY axiom_function
    (20) JustDefined -> CLASS_IDENTIFIER . COMMA expression statement_class_disjoin statement_class_individuals
    (21) JustDefined -> CLASS_IDENTIFIER . AND expression statement_class_disjoin statement_class_individuals
    (23) JustDefined -> CLASS_IDENTIFIER .
    (128) statement_covered_class_check -> CLASS_IDENTIFIER .
    (129) statement_covered_class_check -> CLASS_IDENTIFIER . OR statement_covered_class_check
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

  ! reduce/reduce conflict for SubClassOf resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    AND             shift and go to state 52
    COMMA           shift and go to state 53
    SubClassOf      reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    Class           reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    $end            reduce using rule 23 (JustDefined -> CLASS_IDENTIFIER .)
    OR              shift and go to state 55
    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

  ! SubClassOf      [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]

    expression                     shift and go to state 54
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32
    statement_property_identify    shift and go to state 33

state 26

    (22) JustDefined -> expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    SubClassOf      reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 56
    empty                          shift and go to state 17

state 27

    (79) simple_paren -> LEFT_PAREN . usually_inside_paren RIGHT_PAREN
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    usually_inside_paren           shift and go to state 57
    statement_property_identify    shift and go to state 33

state 28

    (124) statement_enumerated_class -> LEFT_CURLY_BRACKET . statement_enumerated_class_check RIGHT_CURLY_BRACKET
    (125) statement_enumerated_class_check -> . IndividualNames
    (126) statement_enumerated_class_check -> . IndividualNames COMMA statement_enumerated_class_check

    IndividualNames shift and go to state 59

    statement_enumerated_class_check shift and go to state 58

state 29

    (127) statement_covered_class -> statement_covered_class_check .

    SubClassOf      reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)
    DisjointClasses reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)
    DisjointWith    reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)
    Individuals     reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)
    Class           reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)
    $end            reduce using rule 127 (statement_covered_class -> statement_covered_class_check .)


state 30

    (24) JustDefined -> empty .

    SubClassOf      reduce using rule 24 (JustDefined -> empty .)
    DisjointClasses reduce using rule 24 (JustDefined -> empty .)
    DisjointWith    reduce using rule 24 (JustDefined -> empty .)
    Individuals     reduce using rule 24 (JustDefined -> empty .)
    Class           reduce using rule 24 (JustDefined -> empty .)
    $end            reduce using rule 24 (JustDefined -> empty .)


state 31

    (83) expression -> usually_inside_paren .
    (84) expression -> usually_inside_paren . COMMA expression

    DisjointClasses reduce using rule 83 (expression -> usually_inside_paren .)
    DisjointWith    reduce using rule 83 (expression -> usually_inside_paren .)
    Individuals     reduce using rule 83 (expression -> usually_inside_paren .)
    SubClassOf      reduce using rule 83 (expression -> usually_inside_paren .)
    Class           reduce using rule 83 (expression -> usually_inside_paren .)
    $end            reduce using rule 83 (expression -> usually_inside_paren .)
    ONLY            reduce using rule 83 (expression -> usually_inside_paren .)
    COMMA           shift and go to state 60


state 32

    (85) expression -> simple_paren .
    (86) expression -> simple_paren . COMMA expression
    (87) expression -> simple_paren . AND expression

    DisjointClasses reduce using rule 85 (expression -> simple_paren .)
    DisjointWith    reduce using rule 85 (expression -> simple_paren .)
    Individuals     reduce using rule 85 (expression -> simple_paren .)
    SubClassOf      reduce using rule 85 (expression -> simple_paren .)
    Class           reduce using rule 85 (expression -> simple_paren .)
    $end            reduce using rule 85 (expression -> simple_paren .)
    ONLY            reduce using rule 85 (expression -> simple_paren .)
    COMMA           shift and go to state 61
    AND             shift and go to state 62


state 33

    (65) usually_inside_paren -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> statement_property_identify . operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> statement_property_identify . operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> statement_property_identify .
    (28) statement_reserved_word -> . SOME
    (29) statement_reserved_word -> . OR
    (30) statement_reserved_word -> . AND
    (31) statement_reserved_word -> . VALUE
    (25) operators -> . MIN
    (26) operators -> . MAX
    (27) operators -> . EXACTLY

    COMMA           reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    DisjointClasses reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    DisjointWith    reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    Individuals     reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    SubClassOf      reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    Class           reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    $end            reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    ONLY            reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    RIGHT_PAREN     reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    SOME            shift and go to state 65
    OR              shift and go to state 66
    AND             shift and go to state 67
    VALUE           shift and go to state 68
    MIN             shift and go to state 69
    MAX             shift and go to state 70
    EXACTLY         shift and go to state 71

    statement_reserved_word        shift and go to state 63
    operators                      shift and go to state 64

state 34

    (39) statement_property_identify -> PROPERTY_IDENTIFIER_has .

    SOME            reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    OR              reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    AND             reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    VALUE           reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    MIN             reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    MAX             reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    EXACTLY         reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    COMMA           reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    DisjointClasses reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    DisjointWith    reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    Individuals     reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    SubClassOf      reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    Class           reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    $end            reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    ONLY            reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)
    RIGHT_PAREN     reduce using rule 39 (statement_property_identify -> PROPERTY_IDENTIFIER_has .)


state 35

    (40) statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .

    SOME            reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    OR              reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    AND             reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    VALUE           reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    MIN             reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    MAX             reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    EXACTLY         reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    COMMA           reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    DisjointClasses reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    DisjointWith    reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    Individuals     reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    SubClassOf      reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    Class           reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    $end            reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    ONLY            reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)
    RIGHT_PAREN     reduce using rule 40 (statement_property_identify -> PROPERTY_IDENTIFIER_is_Of .)


state 36

    (41) statement_property_identify -> PROPERTY_IDENTIFIER .

    SOME            reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    OR              reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    VALUE           reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    MIN             reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    MAX             reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    EXACTLY         reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    COMMA           reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    DisjointClasses reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    DisjointWith    reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    Individuals     reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    SubClassOf      reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    Class           reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    $end            reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    ONLY            reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 41 (statement_property_identify -> PROPERTY_IDENTIFIER .)


state 37

    (15) subclassof_possible -> SubClassOf nested .

    DisjointClasses reduce using rule 15 (subclassof_possible -> SubClassOf nested .)
    DisjointWith    reduce using rule 15 (subclassof_possible -> SubClassOf nested .)
    Individuals     reduce using rule 15 (subclassof_possible -> SubClassOf nested .)
    Class           reduce using rule 15 (subclassof_possible -> SubClassOf nested .)
    $end            reduce using rule 15 (subclassof_possible -> SubClassOf nested .)


state 38

    (16) subclassof_possible -> SubClassOf statement_closed_axiom_class .

    DisjointClasses reduce using rule 16 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    DisjointWith    reduce using rule 16 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    Individuals     reduce using rule 16 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    Class           reduce using rule 16 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)
    $end            reduce using rule 16 (subclassof_possible -> SubClassOf statement_closed_axiom_class .)


state 39

    (17) subclassof_possible -> SubClassOf statement_enumerated_class .

    DisjointClasses reduce using rule 17 (subclassof_possible -> SubClassOf statement_enumerated_class .)
    DisjointWith    reduce using rule 17 (subclassof_possible -> SubClassOf statement_enumerated_class .)
    Individuals     reduce using rule 17 (subclassof_possible -> SubClassOf statement_enumerated_class .)
    Class           reduce using rule 17 (subclassof_possible -> SubClassOf statement_enumerated_class .)
    $end            reduce using rule 17 (subclassof_possible -> SubClassOf statement_enumerated_class .)


state 40

    (18) subclassof_possible -> SubClassOf statement_covered_class .

    DisjointClasses reduce using rule 18 (subclassof_possible -> SubClassOf statement_covered_class .)
    DisjointWith    reduce using rule 18 (subclassof_possible -> SubClassOf statement_covered_class .)
    Individuals     reduce using rule 18 (subclassof_possible -> SubClassOf statement_covered_class .)
    Class           reduce using rule 18 (subclassof_possible -> SubClassOf statement_covered_class .)
    $end            reduce using rule 18 (subclassof_possible -> SubClassOf statement_covered_class .)


state 41

    (19) subclassof_possible -> SubClassOf primitive_class_mandatory .

    DisjointClasses reduce using rule 19 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    DisjointWith    reduce using rule 19 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    Individuals     reduce using rule 19 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    Class           reduce using rule 19 (subclassof_possible -> SubClassOf primitive_class_mandatory .)
    $end            reduce using rule 19 (subclassof_possible -> SubClassOf primitive_class_mandatory .)


state 42

    (97) nested -> CLASS_IDENTIFIER . AND nested_descriptions
    (98) nested -> CLASS_IDENTIFIER . COMMA nested_descriptions
    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER . AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER . COMMA expression ONLY axiom_function
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER . AND expression ONLY axiom_function
    (123) statement_closed_axiom_class -> CLASS_IDENTIFIER . expression ONLY axiom_function
    (42) primitive_class_mandatory -> CLASS_IDENTIFIER . COMMA expression statement_class_disjoin statement_class_individuals
    (43) primitive_class_mandatory -> CLASS_IDENTIFIER . AND expression statement_class_disjoin statement_class_individuals
    (45) primitive_class_mandatory -> CLASS_IDENTIFIER .
    (128) statement_covered_class_check -> CLASS_IDENTIFIER .
    (129) statement_covered_class_check -> CLASS_IDENTIFIER . OR statement_covered_class_check
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

  ! reduce/reduce conflict for DisjointClasses resolved using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    AND             shift and go to state 72
    COMMA           shift and go to state 73
    DisjointClasses reduce using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    Class           reduce using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    $end            reduce using rule 45 (primitive_class_mandatory -> CLASS_IDENTIFIER .)
    OR              shift and go to state 55
    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

  ! DisjointClasses [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .) ]

    expression                     shift and go to state 54
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32
    statement_property_identify    shift and go to state 33

state 43

    (44) primitive_class_mandatory -> expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 74
    empty                          shift and go to state 17

state 44

    (46) primitive_class_mandatory -> empty .

    DisjointClasses reduce using rule 46 (primitive_class_mandatory -> empty .)
    DisjointWith    reduce using rule 46 (primitive_class_mandatory -> empty .)
    Individuals     reduce using rule 46 (primitive_class_mandatory -> empty .)
    Class           reduce using rule 46 (primitive_class_mandatory -> empty .)
    $end            reduce using rule 46 (primitive_class_mandatory -> empty .)


state 45

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

    Individuals     shift and go to state 48
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    statement_class_individuals    shift and go to state 75
    empty                          shift and go to state 47

state 46

    (7) statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .

    Class           reduce using rule 7 (statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 7 (statement_primitive_class -> subclassof_possible statement_class_disjoin statement_class_individuals .)


state 47

    (52) statement_class_individuals -> empty .

    Class           reduce using rule 52 (statement_class_individuals -> empty .)
    $end            reduce using rule 52 (statement_class_individuals -> empty .)
    SubClassOf      reduce using rule 52 (statement_class_individuals -> empty .)
    DisjointClasses reduce using rule 52 (statement_class_individuals -> empty .)
    DisjointWith    reduce using rule 52 (statement_class_individuals -> empty .)
    Individuals     reduce using rule 52 (statement_class_individuals -> empty .)


state 48

    (53) statement_class_individuals -> Individuals . statement_class_individuals_check
    (54) statement_class_individuals_check -> . IndividualNames
    (55) statement_class_individuals_check -> . IndividualNames COMMA statement_class_individuals_check

    IndividualNames shift and go to state 77

    statement_class_individuals_check shift and go to state 76

state 49

    (48) statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .

    Individuals     reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    Class           reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    $end            reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    SubClassOf      reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    DisjointClasses reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)
    DisjointWith    reduce using rule 48 (statement_class_disjoin -> DisjointClasses statement_class_disjoin_check .)


state 50

    (50) statement_class_disjoin_check -> CLASS_IDENTIFIER .
    (51) statement_class_disjoin_check -> CLASS_IDENTIFIER . COMMA statement_class_disjoin_check

    Individuals     reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    Class           reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    $end            reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 50 (statement_class_disjoin_check -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 78


state 51

    (49) statement_class_disjoin -> DisjointWith statement_class_disjoin_check .

    Individuals     reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)
    Class           reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)
    $end            reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)
    SubClassOf      reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)
    DisjointClasses reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)
    DisjointWith    reduce using rule 49 (statement_class_disjoin -> DisjointWith statement_class_disjoin_check .)


state 52

    (97) nested -> CLASS_IDENTIFIER AND . nested_descriptions
    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND . expression ONLY axiom_function
    (21) JustDefined -> CLASS_IDENTIFIER AND . expression statement_class_disjoin statement_class_individuals
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN

    LEFT_PAREN      shift and go to state 82
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 80
    expression                     shift and go to state 81
    statement_property_identify    shift and go to state 83
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32

state 53

    (98) nested -> CLASS_IDENTIFIER COMMA . nested_descriptions
    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . expression ONLY axiom_function
    (20) JustDefined -> CLASS_IDENTIFIER COMMA . expression statement_class_disjoin statement_class_individuals
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN

    LEFT_PAREN      shift and go to state 82
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 84
    expression                     shift and go to state 85
    statement_property_identify    shift and go to state 83
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32

state 54

    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER expression . ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (123) statement_closed_axiom_class -> CLASS_IDENTIFIER expression . ONLY axiom_function

    ONLY            shift and go to state 86


state 55

    (129) statement_covered_class_check -> CLASS_IDENTIFIER OR . statement_covered_class_check
    (128) statement_covered_class_check -> . CLASS_IDENTIFIER
    (129) statement_covered_class_check -> . CLASS_IDENTIFIER OR statement_covered_class_check

    CLASS_IDENTIFIER shift and go to state 87

    statement_covered_class_check  shift and go to state 88

state 56

    (22) JustDefined -> expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    SubClassOf      reduce using rule 130 (empty -> .)
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 89
    empty                          shift and go to state 47

state 57

    (79) simple_paren -> LEFT_PAREN usually_inside_paren . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 90


state 58

    (124) statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 91


state 59

    (125) statement_enumerated_class_check -> IndividualNames .
    (126) statement_enumerated_class_check -> IndividualNames . COMMA statement_enumerated_class_check

    RIGHT_CURLY_BRACKET reduce using rule 125 (statement_enumerated_class_check -> IndividualNames .)
    COMMA           shift and go to state 92


state 60

    (84) expression -> usually_inside_paren COMMA . expression
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    usually_inside_paren           shift and go to state 31
    expression                     shift and go to state 93
    simple_paren                   shift and go to state 32
    statement_property_identify    shift and go to state 33

state 61

    (86) expression -> simple_paren COMMA . expression
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    simple_paren                   shift and go to state 32
    expression                     shift and go to state 94
    usually_inside_paren           shift and go to state 31
    statement_property_identify    shift and go to state 33

state 62

    (87) expression -> simple_paren AND . expression
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    simple_paren                   shift and go to state 32
    expression                     shift and go to state 95
    usually_inside_paren           shift and go to state 31
    statement_property_identify    shift and go to state 33

state 63

    (65) usually_inside_paren -> statement_property_identify statement_reserved_word . CLASS_IDENTIFIER
    (66) usually_inside_paren -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE
    (69) usually_inside_paren -> statement_property_identify statement_reserved_word . NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET

    CLASS_IDENTIFIER shift and go to state 96
    NAMESPACEID     shift and go to state 97


state 64

    (67) usually_inside_paren -> statement_property_identify operators . NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> statement_property_identify operators . NUMBER CLASS_IDENTIFIER

    NUMBER          shift and go to state 98


state 65

    (28) statement_reserved_word -> SOME .

    CLASS_IDENTIFIER reduce using rule 28 (statement_reserved_word -> SOME .)
    NAMESPACEID     reduce using rule 28 (statement_reserved_word -> SOME .)


state 66

    (29) statement_reserved_word -> OR .

    CLASS_IDENTIFIER reduce using rule 29 (statement_reserved_word -> OR .)
    NAMESPACEID     reduce using rule 29 (statement_reserved_word -> OR .)


state 67

    (30) statement_reserved_word -> AND .

    CLASS_IDENTIFIER reduce using rule 30 (statement_reserved_word -> AND .)
    NAMESPACEID     reduce using rule 30 (statement_reserved_word -> AND .)


state 68

    (31) statement_reserved_word -> VALUE .

    CLASS_IDENTIFIER reduce using rule 31 (statement_reserved_word -> VALUE .)
    NAMESPACEID     reduce using rule 31 (statement_reserved_word -> VALUE .)


state 69

    (25) operators -> MIN .

    NUMBER          reduce using rule 25 (operators -> MIN .)


state 70

    (26) operators -> MAX .

    NUMBER          reduce using rule 26 (operators -> MAX .)


state 71

    (27) operators -> EXACTLY .

    NUMBER          reduce using rule 27 (operators -> EXACTLY .)


state 72

    (97) nested -> CLASS_IDENTIFIER AND . nested_descriptions
    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND . expression ONLY axiom_function
    (43) primitive_class_mandatory -> CLASS_IDENTIFIER AND . expression statement_class_disjoin statement_class_individuals
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN

    LEFT_PAREN      shift and go to state 82
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 80
    expression                     shift and go to state 99
    statement_property_identify    shift and go to state 83
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32

state 73

    (98) nested -> CLASS_IDENTIFIER COMMA . nested_descriptions
    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA . expression ONLY axiom_function
    (42) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA . expression statement_class_disjoin statement_class_individuals
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (83) expression -> . usually_inside_paren
    (84) expression -> . usually_inside_paren COMMA expression
    (85) expression -> . simple_paren
    (86) expression -> . simple_paren COMMA expression
    (87) expression -> . simple_paren AND expression
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (79) simple_paren -> . LEFT_PAREN usually_inside_paren RIGHT_PAREN

    LEFT_PAREN      shift and go to state 82
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 84
    expression                     shift and go to state 100
    statement_property_identify    shift and go to state 83
    usually_inside_paren           shift and go to state 31
    simple_paren                   shift and go to state 32

state 74

    (44) primitive_class_mandatory -> expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 101
    empty                          shift and go to state 47

state 75

    (6) statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .

    Class           reduce using rule 6 (statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 6 (statement_defined_class -> EquivalentTo_possible maybe_suclassof statement_class_disjoin statement_class_individuals .)


state 76

    (53) statement_class_individuals -> Individuals statement_class_individuals_check .

    Class           reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    $end            reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    SubClassOf      reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    DisjointClasses reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    DisjointWith    reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)
    Individuals     reduce using rule 53 (statement_class_individuals -> Individuals statement_class_individuals_check .)


state 77

    (54) statement_class_individuals_check -> IndividualNames .
    (55) statement_class_individuals_check -> IndividualNames . COMMA statement_class_individuals_check

    Class           reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    $end            reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    SubClassOf      reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    DisjointClasses reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    DisjointWith    reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    Individuals     reduce using rule 54 (statement_class_individuals_check -> IndividualNames .)
    COMMA           shift and go to state 102


state 78

    (51) statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA . statement_class_disjoin_check
    (50) statement_class_disjoin_check -> . CLASS_IDENTIFIER
    (51) statement_class_disjoin_check -> . CLASS_IDENTIFIER COMMA statement_class_disjoin_check

    CLASS_IDENTIFIER shift and go to state 50

    statement_class_disjoin_check  shift and go to state 103

state 79

    (106) nested_descriptions -> CLASS_IDENTIFIER . statement_others_reserved_word nested_descriptions
    (115) nested_descriptions -> CLASS_IDENTIFIER .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SubClassOf      reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    Class           reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    $end            reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

  ! AND             [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]

    statement_others_reserved_word shift and go to state 104

state 80

    (97) nested -> CLASS_IDENTIFIER AND nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

    SubClassOf      reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    DisjointClasses reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    DisjointWith    reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    Individuals     reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    Class           reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    $end            reduce using rule 97 (nested -> CLASS_IDENTIFIER AND nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113


state 81

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression . ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression . ONLY axiom_function
    (21) JustDefined -> CLASS_IDENTIFIER AND expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    ONLY            shift and go to state 114
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    SubClassOf      reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 115
    empty                          shift and go to state 17

state 82

    (101) nested_descriptions -> LEFT_PAREN . nested_descriptions RIGHT_PAREN
    (79) simple_paren -> LEFT_PAREN . usually_inside_paren RIGHT_PAREN
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (65) usually_inside_paren -> . statement_property_identify statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> . statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> . statement_property_identify operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> . statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> . statement_property_identify
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 117
    usually_inside_paren           shift and go to state 57
    statement_property_identify    shift and go to state 83

state 83

    (102) nested_descriptions -> statement_property_identify . statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> statement_property_identify . statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE IndividualNames
    (107) nested_descriptions -> statement_property_identify . VALUE IndividualNames
    (108) nested_descriptions -> statement_property_identify . VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> statement_property_identify . statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> statement_property_identify . statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> statement_property_identify . statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> statement_property_identify . statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> statement_property_identify . statement_others_reserved_word SOME nested_descriptions
    (65) usually_inside_paren -> statement_property_identify . statement_reserved_word CLASS_IDENTIFIER
    (66) usually_inside_paren -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE
    (67) usually_inside_paren -> statement_property_identify . operators NUMBER NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> statement_property_identify . operators NUMBER CLASS_IDENTIFIER
    (69) usually_inside_paren -> statement_property_identify . statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET
    (70) usually_inside_paren -> statement_property_identify .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND
    (28) statement_reserved_word -> . SOME
    (29) statement_reserved_word -> . OR
    (30) statement_reserved_word -> . AND
    (31) statement_reserved_word -> . VALUE
    (25) operators -> . MIN
    (26) operators -> . MAX
    (27) operators -> . EXACTLY

  ! shift/reduce conflict for ONLY resolved as shift
    VALUE           shift and go to state 119
    COMMA           reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    DisjointClasses reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    DisjointWith    reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    Individuals     reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    SubClassOf      reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    Class           reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    $end            reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    RIGHT_PAREN     reduce using rule 70 (usually_inside_paren -> statement_property_identify .)
    SOME            shift and go to state 120
    MIN             shift and go to state 121
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 122
    OR              shift and go to state 123
    MAX             shift and go to state 124
    AND             shift and go to state 125

  ! ONLY            [ reduce using rule 70 (usually_inside_paren -> statement_property_identify .) ]

    statement_others_reserved_word shift and go to state 118
    statement_reserved_word        shift and go to state 63
    operators                      shift and go to state 64

state 84

    (98) nested -> CLASS_IDENTIFIER COMMA nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

    SubClassOf      reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    DisjointClasses reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    DisjointWith    reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    Individuals     reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    Class           reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    $end            reduce using rule 98 (nested -> CLASS_IDENTIFIER COMMA nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113


state 85

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression . ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression . ONLY axiom_function
    (20) JustDefined -> CLASS_IDENTIFIER COMMA expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    ONLY            shift and go to state 126
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    SubClassOf      reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 127
    empty                          shift and go to state 17

state 86

    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY . LEFT_PAREN axiom_function RIGHT_PAREN
    (123) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY . axiom_function
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    LEFT_PAREN      shift and go to state 129
    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 130

state 87

    (128) statement_covered_class_check -> CLASS_IDENTIFIER .
    (129) statement_covered_class_check -> CLASS_IDENTIFIER . OR statement_covered_class_check

    SubClassOf      reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    Class           reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    $end            reduce using rule 128 (statement_covered_class_check -> CLASS_IDENTIFIER .)
    OR              shift and go to state 55


state 88

    (129) statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .

    SubClassOf      reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    DisjointClasses reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    DisjointWith    reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    Individuals     reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    Class           reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)
    $end            reduce using rule 129 (statement_covered_class_check -> CLASS_IDENTIFIER OR statement_covered_class_check .)


state 89

    (22) JustDefined -> expression statement_class_disjoin statement_class_individuals .

    SubClassOf      reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)
    DisjointClasses reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 22 (JustDefined -> expression statement_class_disjoin statement_class_individuals .)


state 90

    (79) simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .

    COMMA           reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    AND             reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    DisjointClasses reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    DisjointWith    reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    Individuals     reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    SubClassOf      reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    Class           reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    $end            reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)
    ONLY            reduce using rule 79 (simple_paren -> LEFT_PAREN usually_inside_paren RIGHT_PAREN .)


state 91

    (124) statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .

    SubClassOf      reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    DisjointClasses reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    DisjointWith    reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    Individuals     reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    Class           reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 124 (statement_enumerated_class -> LEFT_CURLY_BRACKET statement_enumerated_class_check RIGHT_CURLY_BRACKET .)


state 92

    (126) statement_enumerated_class_check -> IndividualNames COMMA . statement_enumerated_class_check
    (125) statement_enumerated_class_check -> . IndividualNames
    (126) statement_enumerated_class_check -> . IndividualNames COMMA statement_enumerated_class_check

    IndividualNames shift and go to state 59

    statement_enumerated_class_check shift and go to state 131

state 93

    (84) expression -> usually_inside_paren COMMA expression .

    DisjointClasses reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    DisjointWith    reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    Individuals     reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    SubClassOf      reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    Class           reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    $end            reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)
    ONLY            reduce using rule 84 (expression -> usually_inside_paren COMMA expression .)


state 94

    (86) expression -> simple_paren COMMA expression .

    DisjointClasses reduce using rule 86 (expression -> simple_paren COMMA expression .)
    DisjointWith    reduce using rule 86 (expression -> simple_paren COMMA expression .)
    Individuals     reduce using rule 86 (expression -> simple_paren COMMA expression .)
    SubClassOf      reduce using rule 86 (expression -> simple_paren COMMA expression .)
    Class           reduce using rule 86 (expression -> simple_paren COMMA expression .)
    $end            reduce using rule 86 (expression -> simple_paren COMMA expression .)
    ONLY            reduce using rule 86 (expression -> simple_paren COMMA expression .)


state 95

    (87) expression -> simple_paren AND expression .

    DisjointClasses reduce using rule 87 (expression -> simple_paren AND expression .)
    DisjointWith    reduce using rule 87 (expression -> simple_paren AND expression .)
    Individuals     reduce using rule 87 (expression -> simple_paren AND expression .)
    SubClassOf      reduce using rule 87 (expression -> simple_paren AND expression .)
    Class           reduce using rule 87 (expression -> simple_paren AND expression .)
    $end            reduce using rule 87 (expression -> simple_paren AND expression .)
    ONLY            reduce using rule 87 (expression -> simple_paren AND expression .)


state 96

    (65) usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .

    COMMA           reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Individuals     reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    Class           reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    $end            reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    ONLY            reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 65 (usually_inside_paren -> statement_property_identify statement_reserved_word CLASS_IDENTIFIER .)


state 97

    (66) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE
    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID . DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET

    DATA_TYPE       shift and go to state 132


state 98

    (67) usually_inside_paren -> statement_property_identify operators NUMBER . NAMESPACEID DATA_TYPE
    (68) usually_inside_paren -> statement_property_identify operators NUMBER . CLASS_IDENTIFIER

    NAMESPACEID     shift and go to state 133
    CLASS_IDENTIFIER shift and go to state 134


state 99

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression . ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression . ONLY axiom_function
    (43) primitive_class_mandatory -> CLASS_IDENTIFIER AND expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    ONLY            shift and go to state 114
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 135
    empty                          shift and go to state 17

state 100

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression . ONLY LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression . ONLY axiom_function
    (42) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression . statement_class_disjoin statement_class_individuals
    (47) statement_class_disjoin -> . empty
    (48) statement_class_disjoin -> . DisjointClasses statement_class_disjoin_check
    (49) statement_class_disjoin -> . DisjointWith statement_class_disjoin_check
    (130) empty -> .

  ! shift/reduce conflict for DisjointClasses resolved as shift
  ! shift/reduce conflict for DisjointWith resolved as shift
    ONLY            shift and go to state 126
    DisjointClasses shift and go to state 18
    DisjointWith    shift and go to state 19
    Individuals     reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! DisjointClasses [ reduce using rule 130 (empty -> .) ]
  ! DisjointWith    [ reduce using rule 130 (empty -> .) ]

    statement_class_disjoin        shift and go to state 136
    empty                          shift and go to state 17

state 101

    (44) primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .

    DisjointClasses reduce using rule 44 (primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 44 (primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 44 (primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 44 (primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 44 (primitive_class_mandatory -> expression statement_class_disjoin statement_class_individuals .)


state 102

    (55) statement_class_individuals_check -> IndividualNames COMMA . statement_class_individuals_check
    (54) statement_class_individuals_check -> . IndividualNames
    (55) statement_class_individuals_check -> . IndividualNames COMMA statement_class_individuals_check

    IndividualNames shift and go to state 77

    statement_class_individuals_check shift and go to state 137

state 103

    (51) statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .

    Individuals     reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    Class           reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    $end            reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    SubClassOf      reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    DisjointClasses reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)
    DisjointWith    reduce using rule 51 (statement_class_disjoin_check -> CLASS_IDENTIFIER COMMA statement_class_disjoin_check .)


state 104

    (106) nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 138
    statement_property_identify    shift and go to state 139

state 105

    (32) statement_others_reserved_word -> SOME .

    LEFT_PAREN      reduce using rule 32 (statement_others_reserved_word -> SOME .)
    CLASS_IDENTIFIER reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_has reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 32 (statement_others_reserved_word -> SOME .)
    VALUE           reduce using rule 32 (statement_others_reserved_word -> SOME .)
    NUMBER          reduce using rule 32 (statement_others_reserved_word -> SOME .)
    ONLY            reduce using rule 32 (statement_others_reserved_word -> SOME .)
    SOME            reduce using rule 32 (statement_others_reserved_word -> SOME .)


state 106

    (33) statement_others_reserved_word -> MIN .

    LEFT_PAREN      reduce using rule 33 (statement_others_reserved_word -> MIN .)
    CLASS_IDENTIFIER reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_has reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 33 (statement_others_reserved_word -> MIN .)
    VALUE           reduce using rule 33 (statement_others_reserved_word -> MIN .)
    NUMBER          reduce using rule 33 (statement_others_reserved_word -> MIN .)
    ONLY            reduce using rule 33 (statement_others_reserved_word -> MIN .)
    SOME            reduce using rule 33 (statement_others_reserved_word -> MIN .)


state 107

    (34) statement_others_reserved_word -> ONLY .

    LEFT_PAREN      reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    CLASS_IDENTIFIER reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER_has reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    PROPERTY_IDENTIFIER reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    VALUE           reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    NUMBER          reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    ONLY            reduce using rule 34 (statement_others_reserved_word -> ONLY .)
    SOME            reduce using rule 34 (statement_others_reserved_word -> ONLY .)


state 108

    (35) statement_others_reserved_word -> EXACTLY .

    LEFT_PAREN      reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_has reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    VALUE           reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    NUMBER          reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    ONLY            reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    SOME            reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)


state 109

    (36) statement_others_reserved_word -> OR .

    LEFT_PAREN      reduce using rule 36 (statement_others_reserved_word -> OR .)
    CLASS_IDENTIFIER reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_has reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER reduce using rule 36 (statement_others_reserved_word -> OR .)
    VALUE           reduce using rule 36 (statement_others_reserved_word -> OR .)
    NUMBER          reduce using rule 36 (statement_others_reserved_word -> OR .)
    ONLY            reduce using rule 36 (statement_others_reserved_word -> OR .)
    SOME            reduce using rule 36 (statement_others_reserved_word -> OR .)


state 110

    (37) statement_others_reserved_word -> MAX .

    LEFT_PAREN      reduce using rule 37 (statement_others_reserved_word -> MAX .)
    CLASS_IDENTIFIER reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_has reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 37 (statement_others_reserved_word -> MAX .)
    VALUE           reduce using rule 37 (statement_others_reserved_word -> MAX .)
    NUMBER          reduce using rule 37 (statement_others_reserved_word -> MAX .)
    ONLY            reduce using rule 37 (statement_others_reserved_word -> MAX .)
    SOME            reduce using rule 37 (statement_others_reserved_word -> MAX .)


state 111

    (38) statement_others_reserved_word -> AND .

    LEFT_PAREN      reduce using rule 38 (statement_others_reserved_word -> AND .)
    CLASS_IDENTIFIER reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_has reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 38 (statement_others_reserved_word -> AND .)
    VALUE           reduce using rule 38 (statement_others_reserved_word -> AND .)
    NUMBER          reduce using rule 38 (statement_others_reserved_word -> AND .)
    ONLY            reduce using rule 38 (statement_others_reserved_word -> AND .)
    SOME            reduce using rule 38 (statement_others_reserved_word -> AND .)


state 112

    (99) nested_descriptions -> nested_descriptions AND . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 140
    statement_property_identify    shift and go to state 139

state 113

    (100) nested_descriptions -> nested_descriptions OR . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 141
    statement_property_identify    shift and go to state 139

state 114

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY . LEFT_PAREN axiom_function RIGHT_PAREN
    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY . axiom_function
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    LEFT_PAREN      shift and go to state 142
    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 143

state 115

    (21) JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    SubClassOf      reduce using rule 130 (empty -> .)
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 144
    empty                          shift and go to state 47

state 116

    (101) nested_descriptions -> LEFT_PAREN . nested_descriptions RIGHT_PAREN
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    nested_descriptions            shift and go to state 117
    statement_property_identify    shift and go to state 139

state 117

    (101) nested_descriptions -> LEFT_PAREN nested_descriptions . RIGHT_PAREN
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

    RIGHT_PAREN     shift and go to state 145
    AND             shift and go to state 112
    OR              shift and go to state 113


state 118

    (102) nested_descriptions -> statement_property_identify statement_others_reserved_word . nested_descriptions
    (103) nested_descriptions -> statement_property_identify statement_others_reserved_word . CLASS_IDENTIFIER
    (104) nested_descriptions -> statement_property_identify statement_others_reserved_word . VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> statement_property_identify statement_others_reserved_word . VALUE IndividualNames
    (109) nested_descriptions -> statement_property_identify statement_others_reserved_word . VALUE nested_descriptions
    (110) nested_descriptions -> statement_property_identify statement_others_reserved_word . NUMBER nested_descriptions
    (111) nested_descriptions -> statement_property_identify statement_others_reserved_word . ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> statement_property_identify statement_others_reserved_word . ONLY nested_descriptions
    (113) nested_descriptions -> statement_property_identify statement_others_reserved_word . SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> statement_property_identify statement_others_reserved_word . SOME nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 147
    VALUE           shift and go to state 148
    NUMBER          shift and go to state 149
    ONLY            shift and go to state 150
    SOME            shift and go to state 151
    LEFT_PAREN      shift and go to state 116
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    statement_property_identify    shift and go to state 139
    nested_descriptions            shift and go to state 146

state 119

    (107) nested_descriptions -> statement_property_identify VALUE . IndividualNames
    (108) nested_descriptions -> statement_property_identify VALUE . CLASS_IDENTIFIER
    (31) statement_reserved_word -> VALUE .

  ! shift/reduce conflict for CLASS_IDENTIFIER resolved as shift
    IndividualNames shift and go to state 152
    CLASS_IDENTIFIER shift and go to state 153
    NAMESPACEID     reduce using rule 31 (statement_reserved_word -> VALUE .)

  ! CLASS_IDENTIFIER [ reduce using rule 31 (statement_reserved_word -> VALUE .) ]


state 120

    (32) statement_others_reserved_word -> SOME .
    (28) statement_reserved_word -> SOME .

  ! reduce/reduce conflict for CLASS_IDENTIFIER resolved using rule 28 (statement_reserved_word -> SOME .)
    VALUE           reduce using rule 32 (statement_others_reserved_word -> SOME .)
    NUMBER          reduce using rule 32 (statement_others_reserved_word -> SOME .)
    ONLY            reduce using rule 32 (statement_others_reserved_word -> SOME .)
    SOME            reduce using rule 32 (statement_others_reserved_word -> SOME .)
    LEFT_PAREN      reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_has reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 32 (statement_others_reserved_word -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 32 (statement_others_reserved_word -> SOME .)
    CLASS_IDENTIFIER reduce using rule 28 (statement_reserved_word -> SOME .)
    NAMESPACEID     reduce using rule 28 (statement_reserved_word -> SOME .)

  ! CLASS_IDENTIFIER [ reduce using rule 32 (statement_others_reserved_word -> SOME .) ]


state 121

    (33) statement_others_reserved_word -> MIN .
    (25) operators -> MIN .

  ! reduce/reduce conflict for NUMBER resolved using rule 25 (operators -> MIN .)
    CLASS_IDENTIFIER reduce using rule 33 (statement_others_reserved_word -> MIN .)
    VALUE           reduce using rule 33 (statement_others_reserved_word -> MIN .)
    ONLY            reduce using rule 33 (statement_others_reserved_word -> MIN .)
    SOME            reduce using rule 33 (statement_others_reserved_word -> MIN .)
    LEFT_PAREN      reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_has reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 33 (statement_others_reserved_word -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 33 (statement_others_reserved_word -> MIN .)
    NUMBER          reduce using rule 25 (operators -> MIN .)

  ! NUMBER          [ reduce using rule 33 (statement_others_reserved_word -> MIN .) ]


state 122

    (35) statement_others_reserved_word -> EXACTLY .
    (27) operators -> EXACTLY .

  ! reduce/reduce conflict for NUMBER resolved using rule 27 (operators -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    VALUE           reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    ONLY            reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    SOME            reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    LEFT_PAREN      reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_has reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 35 (statement_others_reserved_word -> EXACTLY .)
    NUMBER          reduce using rule 27 (operators -> EXACTLY .)

  ! NUMBER          [ reduce using rule 35 (statement_others_reserved_word -> EXACTLY .) ]


state 123

    (36) statement_others_reserved_word -> OR .
    (29) statement_reserved_word -> OR .

  ! reduce/reduce conflict for CLASS_IDENTIFIER resolved using rule 29 (statement_reserved_word -> OR .)
    VALUE           reduce using rule 36 (statement_others_reserved_word -> OR .)
    NUMBER          reduce using rule 36 (statement_others_reserved_word -> OR .)
    ONLY            reduce using rule 36 (statement_others_reserved_word -> OR .)
    SOME            reduce using rule 36 (statement_others_reserved_word -> OR .)
    LEFT_PAREN      reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_has reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 36 (statement_others_reserved_word -> OR .)
    PROPERTY_IDENTIFIER reduce using rule 36 (statement_others_reserved_word -> OR .)
    CLASS_IDENTIFIER reduce using rule 29 (statement_reserved_word -> OR .)
    NAMESPACEID     reduce using rule 29 (statement_reserved_word -> OR .)

  ! CLASS_IDENTIFIER [ reduce using rule 36 (statement_others_reserved_word -> OR .) ]


state 124

    (37) statement_others_reserved_word -> MAX .
    (26) operators -> MAX .

  ! reduce/reduce conflict for NUMBER resolved using rule 26 (operators -> MAX .)
    CLASS_IDENTIFIER reduce using rule 37 (statement_others_reserved_word -> MAX .)
    VALUE           reduce using rule 37 (statement_others_reserved_word -> MAX .)
    ONLY            reduce using rule 37 (statement_others_reserved_word -> MAX .)
    SOME            reduce using rule 37 (statement_others_reserved_word -> MAX .)
    LEFT_PAREN      reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_has reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 37 (statement_others_reserved_word -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 37 (statement_others_reserved_word -> MAX .)
    NUMBER          reduce using rule 26 (operators -> MAX .)

  ! NUMBER          [ reduce using rule 37 (statement_others_reserved_word -> MAX .) ]


state 125

    (38) statement_others_reserved_word -> AND .
    (30) statement_reserved_word -> AND .

  ! reduce/reduce conflict for CLASS_IDENTIFIER resolved using rule 30 (statement_reserved_word -> AND .)
    VALUE           reduce using rule 38 (statement_others_reserved_word -> AND .)
    NUMBER          reduce using rule 38 (statement_others_reserved_word -> AND .)
    ONLY            reduce using rule 38 (statement_others_reserved_word -> AND .)
    SOME            reduce using rule 38 (statement_others_reserved_word -> AND .)
    LEFT_PAREN      reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_has reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER_is_Of reduce using rule 38 (statement_others_reserved_word -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 38 (statement_others_reserved_word -> AND .)
    CLASS_IDENTIFIER reduce using rule 30 (statement_reserved_word -> AND .)
    NAMESPACEID     reduce using rule 30 (statement_reserved_word -> AND .)

  ! CLASS_IDENTIFIER [ reduce using rule 38 (statement_others_reserved_word -> AND .) ]


state 126

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY . LEFT_PAREN axiom_function RIGHT_PAREN
    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY . axiom_function
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    LEFT_PAREN      shift and go to state 154
    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 155

state 127

    (20) JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    SubClassOf      reduce using rule 130 (empty -> .)
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 156
    empty                          shift and go to state 47

state 128

    (116) axiom_function -> CLASS_IDENTIFIER .
    (117) axiom_function -> CLASS_IDENTIFIER . OR axiom_function

    SubClassOf      reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    Individuals     reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    Class           reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    $end            reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 116 (axiom_function -> CLASS_IDENTIFIER .)
    OR              shift and go to state 157


state 129

    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN . axiom_function RIGHT_PAREN
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 158

state 130

    (123) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .

    SubClassOf      reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)
    DisjointClasses reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)
    DisjointWith    reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)
    Individuals     reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)
    Class           reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)
    $end            reduce using rule 123 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY axiom_function .)


state 131

    (126) statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check .

    RIGHT_CURLY_BRACKET reduce using rule 126 (statement_enumerated_class_check -> IndividualNames COMMA statement_enumerated_class_check .)


state 132

    (66) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .
    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE . LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET

    COMMA           reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    DisjointClasses reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    DisjointWith    reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    Individuals     reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    SubClassOf      reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    Class           reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    $end            reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    ONLY            reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    RIGHT_PAREN     reduce using rule 66 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE .)
    LEFT_BRACKET    shift and go to state 159


state 133

    (67) usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID . DATA_TYPE

    DATA_TYPE       shift and go to state 160


state 134

    (68) usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .

    COMMA           reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    Individuals     reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    Class           reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    $end            reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    ONLY            reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 68 (usually_inside_paren -> statement_property_identify operators NUMBER CLASS_IDENTIFIER .)


state 135

    (43) primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 161
    empty                          shift and go to state 47

state 136

    (42) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin . statement_class_individuals
    (52) statement_class_individuals -> . empty
    (53) statement_class_individuals -> . Individuals statement_class_individuals_check
    (130) empty -> .

  ! shift/reduce conflict for Individuals resolved as shift
    Individuals     shift and go to state 48
    DisjointClasses reduce using rule 130 (empty -> .)
    DisjointWith    reduce using rule 130 (empty -> .)
    Class           reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

  ! Individuals     [ reduce using rule 130 (empty -> .) ]

    statement_class_individuals    shift and go to state 162
    empty                          shift and go to state 47

state 137

    (55) statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .

    Class           reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    $end            reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    SubClassOf      reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    DisjointClasses reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    DisjointWith    reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)
    Individuals     reduce using rule 55 (statement_class_individuals_check -> IndividualNames COMMA statement_class_individuals_check .)


state 138

    (106) nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    DisjointClasses reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    DisjointWith    reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    Individuals     reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    Class           reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    $end            reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    RIGHT_PAREN     reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .) ]
  ! OR              [ reduce using rule 106 (nested_descriptions -> CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions .) ]


state 139

    (102) nested_descriptions -> statement_property_identify . statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> statement_property_identify . statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE IndividualNames
    (107) nested_descriptions -> statement_property_identify . VALUE IndividualNames
    (108) nested_descriptions -> statement_property_identify . VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> statement_property_identify . statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> statement_property_identify . statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> statement_property_identify . statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> statement_property_identify . statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> statement_property_identify . statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> statement_property_identify . statement_others_reserved_word SOME nested_descriptions
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

    VALUE           shift and go to state 163
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

    statement_others_reserved_word shift and go to state 118

state 140

    (99) nested_descriptions -> nested_descriptions AND nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    DisjointClasses reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    DisjointWith    reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    Individuals     reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    Class           reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    $end            reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    RIGHT_PAREN     reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .) ]
  ! OR              [ reduce using rule 99 (nested_descriptions -> nested_descriptions AND nested_descriptions .) ]


state 141

    (100) nested_descriptions -> nested_descriptions OR nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    DisjointClasses reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    DisjointWith    reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    Individuals     reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    Class           reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    $end            reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    RIGHT_PAREN     reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .) ]
  ! OR              [ reduce using rule 100 (nested_descriptions -> nested_descriptions OR nested_descriptions .) ]


state 142

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN . axiom_function RIGHT_PAREN
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 164

state 143

    (122) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .

    SubClassOf      reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)
    DisjointClasses reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)
    DisjointWith    reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)
    Individuals     reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)
    Class           reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)
    $end            reduce using rule 122 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY axiom_function .)


state 144

    (21) JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .

    SubClassOf      reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    DisjointClasses reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 21 (JustDefined -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)


state 145

    (101) nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .

    AND             reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    OR              reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    SubClassOf      reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    DisjointClasses reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    DisjointWith    reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    Individuals     reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    Class           reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    $end            reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 101 (nested_descriptions -> LEFT_PAREN nested_descriptions RIGHT_PAREN .)


state 146

    (102) nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    DisjointClasses reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    DisjointWith    reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    Individuals     reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    Class           reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    $end            reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    RIGHT_PAREN     reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .) ]
  ! OR              [ reduce using rule 102 (nested_descriptions -> statement_property_identify statement_others_reserved_word nested_descriptions .) ]


state 147

    (103) nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .
    (106) nested_descriptions -> CLASS_IDENTIFIER . statement_others_reserved_word nested_descriptions
    (115) nested_descriptions -> CLASS_IDENTIFIER .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

  ! reduce/reduce conflict for AND resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SubClassOf      reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    Individuals     reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    Class           reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    $end            reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .)
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

  ! AND             [ reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 103 (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]

    statement_others_reserved_word shift and go to state 104

state 148

    (104) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE . CLASS_IDENTIFIER
    (105) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE . IndividualNames
    (109) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 165
    IndividualNames shift and go to state 166
    LEFT_PAREN      shift and go to state 116
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    statement_property_identify    shift and go to state 139
    nested_descriptions            shift and go to state 167

state 149

    (110) nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    LEFT_PAREN      shift and go to state 116
    CLASS_IDENTIFIER shift and go to state 79
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    statement_property_identify    shift and go to state 139
    nested_descriptions            shift and go to state 168

state 150

    (111) nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY . CLASS_IDENTIFIER
    (112) nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 169
    LEFT_PAREN      shift and go to state 116
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    statement_property_identify    shift and go to state 139
    nested_descriptions            shift and go to state 170

state 151

    (113) nested_descriptions -> statement_property_identify statement_others_reserved_word SOME . CLASS_IDENTIFIER
    (114) nested_descriptions -> statement_property_identify statement_others_reserved_word SOME . nested_descriptions
    (99) nested_descriptions -> . nested_descriptions AND nested_descriptions
    (100) nested_descriptions -> . nested_descriptions OR nested_descriptions
    (101) nested_descriptions -> . LEFT_PAREN nested_descriptions RIGHT_PAREN
    (102) nested_descriptions -> . statement_property_identify statement_others_reserved_word nested_descriptions
    (103) nested_descriptions -> . statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER
    (104) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER
    (105) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE IndividualNames
    (106) nested_descriptions -> . CLASS_IDENTIFIER statement_others_reserved_word nested_descriptions
    (107) nested_descriptions -> . statement_property_identify VALUE IndividualNames
    (108) nested_descriptions -> . statement_property_identify VALUE CLASS_IDENTIFIER
    (109) nested_descriptions -> . statement_property_identify statement_others_reserved_word VALUE nested_descriptions
    (110) nested_descriptions -> . statement_property_identify statement_others_reserved_word NUMBER nested_descriptions
    (111) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER
    (112) nested_descriptions -> . statement_property_identify statement_others_reserved_word ONLY nested_descriptions
    (113) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER
    (114) nested_descriptions -> . statement_property_identify statement_others_reserved_word SOME nested_descriptions
    (115) nested_descriptions -> . CLASS_IDENTIFIER
    (39) statement_property_identify -> . PROPERTY_IDENTIFIER_has
    (40) statement_property_identify -> . PROPERTY_IDENTIFIER_is_Of
    (41) statement_property_identify -> . PROPERTY_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 171
    LEFT_PAREN      shift and go to state 116
    PROPERTY_IDENTIFIER_has shift and go to state 34
    PROPERTY_IDENTIFIER_is_Of shift and go to state 35
    PROPERTY_IDENTIFIER shift and go to state 36

    statement_property_identify    shift and go to state 139
    nested_descriptions            shift and go to state 172

state 152

    (107) nested_descriptions -> statement_property_identify VALUE IndividualNames .

    AND             reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    OR              reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    SubClassOf      reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    DisjointClasses reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    DisjointWith    reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    Individuals     reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    Class           reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    $end            reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)
    RIGHT_PAREN     reduce using rule 107 (nested_descriptions -> statement_property_identify VALUE IndividualNames .)


state 153

    (108) nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .

    AND             reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    OR              reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    SubClassOf      reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    Individuals     reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    Class           reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    $end            reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 108 (nested_descriptions -> statement_property_identify VALUE CLASS_IDENTIFIER .)


state 154

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN . axiom_function RIGHT_PAREN
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 173

state 155

    (121) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .

    SubClassOf      reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)
    DisjointClasses reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)
    DisjointWith    reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)
    Individuals     reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)
    Class           reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)
    $end            reduce using rule 121 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY axiom_function .)


state 156

    (20) JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .

    SubClassOf      reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    DisjointClasses reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 20 (JustDefined -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)


state 157

    (117) axiom_function -> CLASS_IDENTIFIER OR . axiom_function
    (116) axiom_function -> . CLASS_IDENTIFIER
    (117) axiom_function -> . CLASS_IDENTIFIER OR axiom_function

    CLASS_IDENTIFIER shift and go to state 128

    axiom_function                 shift and go to state 174

state 158

    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 175


state 159

    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET . statement_operator_symbol NUMBER RIGHT_BRACKET
    (60) statement_operator_symbol -> . LESS_THAN
    (61) statement_operator_symbol -> . GREATER_THAN
    (62) statement_operator_symbol -> . EQUALS
    (63) statement_operator_symbol -> . GREATER_THAN EQUALS
    (64) statement_operator_symbol -> . LESS_THAN EQUALS

    LESS_THAN       shift and go to state 177
    GREATER_THAN    shift and go to state 178
    EQUALS          shift and go to state 179

    statement_operator_symbol      shift and go to state 176

state 160

    (67) usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .

    COMMA           reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    DisjointClasses reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    DisjointWith    reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    Individuals     reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    SubClassOf      reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    Class           reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    $end            reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    ONLY            reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)
    RIGHT_PAREN     reduce using rule 67 (usually_inside_paren -> statement_property_identify operators NUMBER NAMESPACEID DATA_TYPE .)


state 161

    (43) primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .

    DisjointClasses reduce using rule 43 (primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 43 (primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 43 (primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 43 (primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 43 (primitive_class_mandatory -> CLASS_IDENTIFIER AND expression statement_class_disjoin statement_class_individuals .)


state 162

    (42) primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .

    DisjointClasses reduce using rule 42 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    DisjointWith    reduce using rule 42 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    Individuals     reduce using rule 42 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    Class           reduce using rule 42 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)
    $end            reduce using rule 42 (primitive_class_mandatory -> CLASS_IDENTIFIER COMMA expression statement_class_disjoin statement_class_individuals .)


state 163

    (107) nested_descriptions -> statement_property_identify VALUE . IndividualNames
    (108) nested_descriptions -> statement_property_identify VALUE . CLASS_IDENTIFIER

    IndividualNames shift and go to state 152
    CLASS_IDENTIFIER shift and go to state 153


state 164

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 180


state 165

    (104) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .
    (106) nested_descriptions -> CLASS_IDENTIFIER . statement_others_reserved_word nested_descriptions
    (115) nested_descriptions -> CLASS_IDENTIFIER .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

  ! reduce/reduce conflict for AND resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SubClassOf      reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    Individuals     reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    Class           reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    $end            reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .)
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

  ! AND             [ reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 104 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]

    statement_others_reserved_word shift and go to state 104

state 166

    (105) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .

    AND             reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    OR              reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    SubClassOf      reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    DisjointClasses reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    DisjointWith    reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    Individuals     reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    Class           reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    $end            reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)
    RIGHT_PAREN     reduce using rule 105 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE IndividualNames .)


state 167

    (109) nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    DisjointClasses reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    DisjointWith    reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    Individuals     reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    Class           reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    $end            reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    RIGHT_PAREN     reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .) ]
  ! OR              [ reduce using rule 109 (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE nested_descriptions .) ]


state 168

    (110) nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    DisjointClasses reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    DisjointWith    reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    Individuals     reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    Class           reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    $end            reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    RIGHT_PAREN     reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .) ]
  ! OR              [ reduce using rule 110 (nested_descriptions -> statement_property_identify statement_others_reserved_word NUMBER nested_descriptions .) ]


state 169

    (111) nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .
    (106) nested_descriptions -> CLASS_IDENTIFIER . statement_others_reserved_word nested_descriptions
    (115) nested_descriptions -> CLASS_IDENTIFIER .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

  ! reduce/reduce conflict for AND resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SubClassOf      reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    Individuals     reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    Class           reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    $end            reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .)
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

  ! AND             [ reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 111 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]

    statement_others_reserved_word shift and go to state 104

state 170

    (112) nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    DisjointClasses reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    DisjointWith    reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    Individuals     reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    Class           reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    $end            reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    RIGHT_PAREN     reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .) ]
  ! OR              [ reduce using rule 112 (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY nested_descriptions .) ]


state 171

    (113) nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .
    (106) nested_descriptions -> CLASS_IDENTIFIER . statement_others_reserved_word nested_descriptions
    (115) nested_descriptions -> CLASS_IDENTIFIER .
    (32) statement_others_reserved_word -> . SOME
    (33) statement_others_reserved_word -> . MIN
    (34) statement_others_reserved_word -> . ONLY
    (35) statement_others_reserved_word -> . EXACTLY
    (36) statement_others_reserved_word -> . OR
    (37) statement_others_reserved_word -> . MAX
    (38) statement_others_reserved_word -> . AND

  ! reduce/reduce conflict for AND resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SubClassOf resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointClasses resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DisjointWith resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Individuals resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for Class resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SubClassOf      reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    DisjointClasses reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    DisjointWith    reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    Individuals     reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    Class           reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    $end            reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .)
    SOME            shift and go to state 105
    MIN             shift and go to state 106
    ONLY            shift and go to state 107
    EXACTLY         shift and go to state 108
    OR              shift and go to state 109
    MAX             shift and go to state 110
    AND             shift and go to state 111

  ! AND             [ reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 113 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! OR              [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! SubClassOf      [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointClasses [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! DisjointWith    [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Individuals     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! Class           [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 115 (nested_descriptions -> CLASS_IDENTIFIER .) ]

    statement_others_reserved_word shift and go to state 104

state 172

    (114) nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .
    (99) nested_descriptions -> nested_descriptions . AND nested_descriptions
    (100) nested_descriptions -> nested_descriptions . OR nested_descriptions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SubClassOf      reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    DisjointClasses reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    DisjointWith    reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    Individuals     reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    Class           reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    $end            reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    RIGHT_PAREN     reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .)
    AND             shift and go to state 112
    OR              shift and go to state 113

  ! AND             [ reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .) ]
  ! OR              [ reduce using rule 114 (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME nested_descriptions .) ]


state 173

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 181


state 174

    (117) axiom_function -> CLASS_IDENTIFIER OR axiom_function .

    SubClassOf      reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    DisjointClasses reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    DisjointWith    reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    Individuals     reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    Class           reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    $end            reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)
    RIGHT_PAREN     reduce using rule 117 (axiom_function -> CLASS_IDENTIFIER OR axiom_function .)


state 175

    (120) statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .

    SubClassOf      reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointClasses reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointWith    reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Individuals     reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Class           reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    $end            reduce using rule 120 (statement_closed_axiom_class -> CLASS_IDENTIFIER expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)


state 176

    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol . NUMBER RIGHT_BRACKET

    NUMBER          shift and go to state 182


state 177

    (60) statement_operator_symbol -> LESS_THAN .
    (64) statement_operator_symbol -> LESS_THAN . EQUALS

    NUMBER          reduce using rule 60 (statement_operator_symbol -> LESS_THAN .)
    EQUALS          shift and go to state 183


state 178

    (61) statement_operator_symbol -> GREATER_THAN .
    (63) statement_operator_symbol -> GREATER_THAN . EQUALS

    NUMBER          reduce using rule 61 (statement_operator_symbol -> GREATER_THAN .)
    EQUALS          shift and go to state 184


state 179

    (62) statement_operator_symbol -> EQUALS .

    NUMBER          reduce using rule 62 (statement_operator_symbol -> EQUALS .)


state 180

    (119) statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .

    SubClassOf      reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointClasses reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointWith    reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Individuals     reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Class           reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    $end            reduce using rule 119 (statement_closed_axiom_class -> CLASS_IDENTIFIER AND expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)


state 181

    (118) statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .

    SubClassOf      reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointClasses reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    DisjointWith    reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Individuals     reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    Class           reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)
    $end            reduce using rule 118 (statement_closed_axiom_class -> CLASS_IDENTIFIER COMMA expression ONLY LEFT_PAREN axiom_function RIGHT_PAREN .)


state 182

    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 185


state 183

    (64) statement_operator_symbol -> LESS_THAN EQUALS .

    NUMBER          reduce using rule 64 (statement_operator_symbol -> LESS_THAN EQUALS .)


state 184

    (63) statement_operator_symbol -> GREATER_THAN EQUALS .

    NUMBER          reduce using rule 63 (statement_operator_symbol -> GREATER_THAN EQUALS .)


state 185

    (69) usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .

    COMMA           reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    DisjointClasses reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    DisjointWith    reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    Individuals     reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    SubClassOf      reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    Class           reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    $end            reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    ONLY            reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 69 (usually_inside_paren -> statement_property_identify statement_reserved_word NAMESPACEID DATA_TYPE LEFT_BRACKET statement_operator_symbol NUMBER RIGHT_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DisjointClasses in state 26 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 26 resolved as shift
WARNING: shift/reduce conflict for DisjointClasses in state 43 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 43 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 56 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for DisjointClasses in state 81 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 81 resolved as shift
WARNING: shift/reduce conflict for ONLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DisjointClasses in state 85 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 85 resolved as shift
WARNING: shift/reduce conflict for DisjointClasses in state 99 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 99 resolved as shift
WARNING: shift/reduce conflict for DisjointClasses in state 100 resolved as shift
WARNING: shift/reduce conflict for DisjointWith in state 100 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 115 resolved as shift
WARNING: shift/reduce conflict for CLASS_IDENTIFIER in state 119 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 127 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 135 resolved as shift
WARNING: shift/reduce conflict for Individuals in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 141 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 167 resolved as shift
WARNING: shift/reduce conflict for OR in state 167 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statements -> Class CLASS_IDENTIFIER statement_defined_class)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (statements -> Class CLASS_IDENTIFIER statement_primitive_class)
WARNING: rejected rule (empty -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 25 resolved using rule (JustDefined -> CLASS_IDENTIFIER)
WARNING: rejected rule (statement_covered_class_check -> CLASS_IDENTIFIER) in state 25
WARNING: reduce/reduce conflict in state 42 resolved using rule (primitive_class_mandatory -> CLASS_IDENTIFIER)
WARNING: rejected rule (statement_covered_class_check -> CLASS_IDENTIFIER) in state 42
WARNING: reduce/reduce conflict in state 120 resolved using rule (statement_reserved_word -> SOME)
WARNING: rejected rule (statement_others_reserved_word -> SOME) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (operators -> MIN)
WARNING: rejected rule (statement_others_reserved_word -> MIN) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (operators -> EXACTLY)
WARNING: rejected rule (statement_others_reserved_word -> EXACTLY) in state 122
WARNING: reduce/reduce conflict in state 123 resolved using rule (statement_reserved_word -> OR)
WARNING: rejected rule (statement_others_reserved_word -> OR) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (operators -> MAX)
WARNING: rejected rule (statement_others_reserved_word -> MAX) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (statement_reserved_word -> AND)
WARNING: rejected rule (statement_others_reserved_word -> AND) in state 125
WARNING: reduce/reduce conflict in state 147 resolved using rule (nested_descriptions -> statement_property_identify statement_others_reserved_word CLASS_IDENTIFIER)
WARNING: rejected rule (nested_descriptions -> CLASS_IDENTIFIER) in state 147
WARNING: reduce/reduce conflict in state 165 resolved using rule (nested_descriptions -> statement_property_identify statement_others_reserved_word VALUE CLASS_IDENTIFIER)
WARNING: rejected rule (nested_descriptions -> CLASS_IDENTIFIER) in state 165
WARNING: reduce/reduce conflict in state 169 resolved using rule (nested_descriptions -> statement_property_identify statement_others_reserved_word ONLY CLASS_IDENTIFIER)
WARNING: rejected rule (nested_descriptions -> CLASS_IDENTIFIER) in state 169
WARNING: reduce/reduce conflict in state 171 resolved using rule (nested_descriptions -> statement_property_identify statement_others_reserved_word SOME CLASS_IDENTIFIER)
WARNING: rejected rule (nested_descriptions -> CLASS_IDENTIFIER) in state 171
